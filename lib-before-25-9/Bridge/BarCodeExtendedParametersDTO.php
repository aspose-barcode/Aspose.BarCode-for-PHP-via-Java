<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BarCodeExtendedParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'oneDParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\OneDExtendedParametersDTO',
        ),
        2 => array(
            'var' => 'code128Parameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\Code128ExtendedParametersDTO',
        ),
        3 => array(
            'var' => 'qrParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\QRExtendedParametersDTO',
        ),
        4 => array(
            'var' => 'pdf417Parameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\Pdf417ExtendedParametersDTO',
        ),
        5 => array(
            'var' => 'dataBarParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\DataBarExtendedParametersDTO',
        ),
        6 => array(
            'var' => 'maxiCodeParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\MaxiCodeExtendedParametersDTO',
        ),
        7 => array(
            'var' => 'dotCodeExtendedParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\DotCodeExtendedParametersDTO',
        ),
        8 => array(
            'var' => 'dataMatrixExtendedParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\DataMatrixExtendedParametersDTO',
        ),
        9 => array(
            'var' => 'aztecExtendedParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\AztecExtendedParametersDTO',
        ),
        10 => array(
            'var' => 'gs1CompositeBarExtendedParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\GS1CompositeBarExtendedParametersDTO',
        ),
        11 => array(
            'var' => 'codabarExtendedParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\CodabarExtendedParametersDTO',
        ),
        12 => array(
            'var' => 'toString',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var \Aspose\Barcode\Bridge\OneDExtendedParametersDTO
     */
    public $oneDParameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\Code128ExtendedParametersDTO
     */
    public $code128Parameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\QRExtendedParametersDTO
     */
    public $qrParameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\Pdf417ExtendedParametersDTO
     */
    public $pdf417Parameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\DataBarExtendedParametersDTO
     */
    public $dataBarParameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\MaxiCodeExtendedParametersDTO
     */
    public $maxiCodeParameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\DotCodeExtendedParametersDTO
     */
    public $dotCodeExtendedParameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\DataMatrixExtendedParametersDTO
     */
    public $dataMatrixExtendedParameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\AztecExtendedParametersDTO
     */
    public $aztecExtendedParameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\GS1CompositeBarExtendedParametersDTO
     */
    public $gs1CompositeBarExtendedParameters = null;
    /**
     * @var \Aspose\Barcode\Bridge\CodabarExtendedParametersDTO
     */
    public $codabarExtendedParameters = null;
    /**
     * @var string
     */
    public $toString = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['oneDParameters'])) {
                $this->oneDParameters = $vals['oneDParameters'];
            }
            if (isset($vals['code128Parameters'])) {
                $this->code128Parameters = $vals['code128Parameters'];
            }
            if (isset($vals['qrParameters'])) {
                $this->qrParameters = $vals['qrParameters'];
            }
            if (isset($vals['pdf417Parameters'])) {
                $this->pdf417Parameters = $vals['pdf417Parameters'];
            }
            if (isset($vals['dataBarParameters'])) {
                $this->dataBarParameters = $vals['dataBarParameters'];
            }
            if (isset($vals['maxiCodeParameters'])) {
                $this->maxiCodeParameters = $vals['maxiCodeParameters'];
            }
            if (isset($vals['dotCodeExtendedParameters'])) {
                $this->dotCodeExtendedParameters = $vals['dotCodeExtendedParameters'];
            }
            if (isset($vals['dataMatrixExtendedParameters'])) {
                $this->dataMatrixExtendedParameters = $vals['dataMatrixExtendedParameters'];
            }
            if (isset($vals['aztecExtendedParameters'])) {
                $this->aztecExtendedParameters = $vals['aztecExtendedParameters'];
            }
            if (isset($vals['gs1CompositeBarExtendedParameters'])) {
                $this->gs1CompositeBarExtendedParameters = $vals['gs1CompositeBarExtendedParameters'];
            }
            if (isset($vals['codabarExtendedParameters'])) {
                $this->codabarExtendedParameters = $vals['codabarExtendedParameters'];
            }
            if (isset($vals['toString'])) {
                $this->toString = $vals['toString'];
            }
        }
    }

    public function getName()
    {
        return 'BarCodeExtendedParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->oneDParameters = new \Aspose\Barcode\Bridge\OneDExtendedParametersDTO();
                        $xfer += $this->oneDParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->code128Parameters = new \Aspose\Barcode\Bridge\Code128ExtendedParametersDTO();
                        $xfer += $this->code128Parameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->qrParameters = new \Aspose\Barcode\Bridge\QRExtendedParametersDTO();
                        $xfer += $this->qrParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->pdf417Parameters = new \Aspose\Barcode\Bridge\Pdf417ExtendedParametersDTO();
                        $xfer += $this->pdf417Parameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->dataBarParameters = new \Aspose\Barcode\Bridge\DataBarExtendedParametersDTO();
                        $xfer += $this->dataBarParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->maxiCodeParameters = new \Aspose\Barcode\Bridge\MaxiCodeExtendedParametersDTO();
                        $xfer += $this->maxiCodeParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->dotCodeExtendedParameters = new \Aspose\Barcode\Bridge\DotCodeExtendedParametersDTO();
                        $xfer += $this->dotCodeExtendedParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->dataMatrixExtendedParameters = new \Aspose\Barcode\Bridge\DataMatrixExtendedParametersDTO();
                        $xfer += $this->dataMatrixExtendedParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRUCT) {
                        $this->aztecExtendedParameters = new \Aspose\Barcode\Bridge\AztecExtendedParametersDTO();
                        $xfer += $this->aztecExtendedParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->gs1CompositeBarExtendedParameters = new \Aspose\Barcode\Bridge\GS1CompositeBarExtendedParametersDTO();
                        $xfer += $this->gs1CompositeBarExtendedParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRUCT) {
                        $this->codabarExtendedParameters = new \Aspose\Barcode\Bridge\CodabarExtendedParametersDTO();
                        $xfer += $this->codabarExtendedParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toString);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BarCodeExtendedParametersDTO');
        if ($this->oneDParameters !== null) {
            if (!is_object($this->oneDParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('oneDParameters', TType::STRUCT, 1);
            $xfer += $this->oneDParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->code128Parameters !== null) {
            if (!is_object($this->code128Parameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('code128Parameters', TType::STRUCT, 2);
            $xfer += $this->code128Parameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->qrParameters !== null) {
            if (!is_object($this->qrParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('qrParameters', TType::STRUCT, 3);
            $xfer += $this->qrParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417Parameters !== null) {
            if (!is_object($this->pdf417Parameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('pdf417Parameters', TType::STRUCT, 4);
            $xfer += $this->pdf417Parameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataBarParameters !== null) {
            if (!is_object($this->dataBarParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('dataBarParameters', TType::STRUCT, 5);
            $xfer += $this->dataBarParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxiCodeParameters !== null) {
            if (!is_object($this->maxiCodeParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('maxiCodeParameters', TType::STRUCT, 6);
            $xfer += $this->maxiCodeParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dotCodeExtendedParameters !== null) {
            if (!is_object($this->dotCodeExtendedParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('dotCodeExtendedParameters', TType::STRUCT, 7);
            $xfer += $this->dotCodeExtendedParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataMatrixExtendedParameters !== null) {
            if (!is_object($this->dataMatrixExtendedParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('dataMatrixExtendedParameters', TType::STRUCT, 8);
            $xfer += $this->dataMatrixExtendedParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->aztecExtendedParameters !== null) {
            if (!is_object($this->aztecExtendedParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('aztecExtendedParameters', TType::STRUCT, 9);
            $xfer += $this->aztecExtendedParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->gs1CompositeBarExtendedParameters !== null) {
            if (!is_object($this->gs1CompositeBarExtendedParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('gs1CompositeBarExtendedParameters', TType::STRUCT, 10);
            $xfer += $this->gs1CompositeBarExtendedParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codabarExtendedParameters !== null) {
            if (!is_object($this->codabarExtendedParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('codabarExtendedParameters', TType::STRUCT, 11);
            $xfer += $this->codabarExtendedParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toString !== null) {
            $xfer += $output->writeFieldBegin('toString', TType::STRING, 12);
            $xfer += $output->writeString($this->toString);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

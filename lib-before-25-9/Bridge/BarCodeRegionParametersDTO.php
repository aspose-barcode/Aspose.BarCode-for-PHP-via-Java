<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BarCodeRegionParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'quad',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\QuadrangleDTO',
        ),
        2 => array(
            'var' => 'angle',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        3 => array(
            'var' => 'points',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Aspose\Barcode\Bridge\PointDTO',
                ),
        ),
        4 => array(
            'var' => 'rectangle',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\RectangleDTO',
        ),
        5 => array(
            'var' => 'toString',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var \Aspose\Barcode\Bridge\QuadrangleDTO
     */
    public $quad = null;
    /**
     * @var double
     */
    public $angle = null;
    /**
     * @var \Aspose\Barcode\Bridge\PointDTO[]
     */
    public $points = null;
    /**
     * @var \Aspose\Barcode\Bridge\RectangleDTO
     */
    public $rectangle = null;
    /**
     * @var string
     */
    public $toString = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['quad'])) {
                $this->quad = $vals['quad'];
            }
            if (isset($vals['angle'])) {
                $this->angle = $vals['angle'];
            }
            if (isset($vals['points'])) {
                $this->points = $vals['points'];
            }
            if (isset($vals['rectangle'])) {
                $this->rectangle = $vals['rectangle'];
            }
            if (isset($vals['toString'])) {
                $this->toString = $vals['toString'];
            }
        }
    }

    public function getName()
    {
        return 'BarCodeRegionParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->quad = new \Aspose\Barcode\Bridge\QuadrangleDTO();
                        $xfer += $this->quad->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->angle);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->points = array();
                        $_size21 = 0;
                        $_etype24 = 0;
                        $xfer += $input->readListBegin($_etype24, $_size21);
                        for ($_i25 = 0; $_i25 < $_size21; ++$_i25) {
                            $elem26 = null;
                            $elem26 = new \Aspose\Barcode\Bridge\PointDTO();
                            $xfer += $elem26->read($input);
                            $this->points []= $elem26;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->rectangle = new \Aspose\Barcode\Bridge\RectangleDTO();
                        $xfer += $this->rectangle->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toString);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BarCodeRegionParametersDTO');
        if ($this->quad !== null) {
            if (!is_object($this->quad)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('quad', TType::STRUCT, 1);
            $xfer += $this->quad->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->angle !== null) {
            $xfer += $output->writeFieldBegin('angle', TType::DOUBLE, 2);
            $xfer += $output->writeDouble($this->angle);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->points !== null) {
            if (!is_array($this->points)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('points', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->points));
            foreach ($this->points as $iter27) {
                $xfer += $iter27->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rectangle !== null) {
            if (!is_object($this->rectangle)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('rectangle', TType::STRUCT, 4);
            $xfer += $this->rectangle->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toString !== null) {
            $xfer += $output->writeFieldBegin('toString', TType::STRING, 5);
            $xfer += $output->writeString($this->toString);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

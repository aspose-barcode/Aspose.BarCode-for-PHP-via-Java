<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BarcodeSettingsDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'checksumValidation',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'stripFNC',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        3 => array(
            'var' => 'detectEncoding',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'australiaPost',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\AustraliaPostSettingsDTO',
        ),
    );

    /**
     * @var int
     */
    public $checksumValidation = null;
    /**
     * @var bool
     */
    public $stripFNC = null;
    /**
     * @var bool
     */
    public $detectEncoding = null;
    /**
     * @var \Aspose\Barcode\Bridge\AustraliaPostSettingsDTO
     */
    public $australiaPost = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['checksumValidation'])) {
                $this->checksumValidation = $vals['checksumValidation'];
            }
            if (isset($vals['stripFNC'])) {
                $this->stripFNC = $vals['stripFNC'];
            }
            if (isset($vals['detectEncoding'])) {
                $this->detectEncoding = $vals['detectEncoding'];
            }
            if (isset($vals['australiaPost'])) {
                $this->australiaPost = $vals['australiaPost'];
            }
        }
    }

    public function getName()
    {
        return 'BarcodeSettingsDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->checksumValidation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->stripFNC);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->detectEncoding);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->australiaPost = new \Aspose\Barcode\Bridge\AustraliaPostSettingsDTO();
                        $xfer += $this->australiaPost->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BarcodeSettingsDTO');
        if ($this->checksumValidation !== null) {
            $xfer += $output->writeFieldBegin('checksumValidation', TType::I32, 1);
            $xfer += $output->writeI32($this->checksumValidation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stripFNC !== null) {
            $xfer += $output->writeFieldBegin('stripFNC', TType::BOOL, 2);
            $xfer += $output->writeBool($this->stripFNC);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->detectEncoding !== null) {
            $xfer += $output->writeFieldBegin('detectEncoding', TType::BOOL, 3);
            $xfer += $output->writeBool($this->detectEncoding);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->australiaPost !== null) {
            if (!is_object($this->australiaPost)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('australiaPost', TType::STRUCT, 4);
            $xfer += $this->australiaPost->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

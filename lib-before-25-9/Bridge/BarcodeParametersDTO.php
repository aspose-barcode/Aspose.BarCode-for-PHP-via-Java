<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BarcodeParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'patchCode',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\PatchCodeParametersDTO',
        ),
        2 => array(
            'var' => 'barColor',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'xDimension',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\UnitDTO',
        ),
        4 => array(
            'var' => 'barWidthReduction',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\UnitDTO',
        ),
        5 => array(
            'var' => 'barHeight',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\UnitDTO',
        ),
        6 => array(
            'var' => 'padding',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\PaddingDTO',
        ),
        7 => array(
            'var' => 'checksumAlwaysShow',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'isChecksumEnabled',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'enableEscape',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'throwExceptionWhenCodeTextIncorrect',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        11 => array(
            'var' => 'wideNarrowRatio',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        12 => array(
            'var' => 'codeTextParameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\CodetextParametersDTO',
        ),
        13 => array(
            'var' => 'filledBars',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        14 => array(
            'var' => 'postal',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\PostalParametersDTO',
        ),
        15 => array(
            'var' => 'australianPost',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\AustralianPostParametersDTO',
        ),
        16 => array(
            'var' => 'dataBar',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\DataBarParametersDTO',
        ),
        17 => array(
            'var' => 'gs1CompositeBar',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\GS1CompositeBarParametersDTO',
        ),
        18 => array(
            'var' => 'codablock',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\CodablockParametersDTO',
        ),
        19 => array(
            'var' => 'dataMatrix',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\DataMatrixParametersDTO',
        ),
        20 => array(
            'var' => 'code16K',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\Code16KParametersDTO',
        ),
        21 => array(
            'var' => 'dotCode',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\DotCodeParametersDTO',
        ),
        22 => array(
            'var' => 'itf',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\ITFParametersDTO',
        ),
        23 => array(
            'var' => 'pdf417',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\Pdf417ParametersDTO',
        ),
        24 => array(
            'var' => 'qr',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\QrParametersDTO',
        ),
        25 => array(
            'var' => 'supplement',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\SupplementParametersDTO',
        ),
        26 => array(
            'var' => 'maxiCode',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\MaxiCodeParametersDTO',
        ),
        27 => array(
            'var' => 'aztec',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\AztecParametersDTO',
        ),
        28 => array(
            'var' => 'code128',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\Code128ParametersDTO',
        ),
        29 => array(
            'var' => 'codabar',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\CodabarParametersDTO',
        ),
        30 => array(
            'var' => 'coupon',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\CouponParametersDTO',
        ),
        31 => array(
            'var' => 'hanXin',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\HanXinParametersDTO',
        ),
    );

    /**
     * @var \Aspose\Barcode\Bridge\PatchCodeParametersDTO
     */
    public $patchCode = null;
    /**
     * @var int
     */
    public $barColor = null;
    /**
     * @var \Aspose\Barcode\Bridge\UnitDTO
     */
    public $xDimension = null;
    /**
     * @var \Aspose\Barcode\Bridge\UnitDTO
     */
    public $barWidthReduction = null;
    /**
     * @var \Aspose\Barcode\Bridge\UnitDTO
     */
    public $barHeight = null;
    /**
     * @var \Aspose\Barcode\Bridge\PaddingDTO
     */
    public $padding = null;
    /**
     * @var bool
     */
    public $checksumAlwaysShow = null;
    /**
     * @var int
     */
    public $isChecksumEnabled = null;
    /**
     * @var bool
     */
    public $enableEscape = null;
    /**
     * @var bool
     */
    public $throwExceptionWhenCodeTextIncorrect = null;
    /**
     * @var double
     */
    public $wideNarrowRatio = null;
    /**
     * @var \Aspose\Barcode\Bridge\CodetextParametersDTO
     */
    public $codeTextParameters = null;
    /**
     * @var bool
     */
    public $filledBars = null;
    /**
     * @var \Aspose\Barcode\Bridge\PostalParametersDTO
     */
    public $postal = null;
    /**
     * @var \Aspose\Barcode\Bridge\AustralianPostParametersDTO
     */
    public $australianPost = null;
    /**
     * @var \Aspose\Barcode\Bridge\DataBarParametersDTO
     */
    public $dataBar = null;
    /**
     * @var \Aspose\Barcode\Bridge\GS1CompositeBarParametersDTO
     */
    public $gs1CompositeBar = null;
    /**
     * @var \Aspose\Barcode\Bridge\CodablockParametersDTO
     */
    public $codablock = null;
    /**
     * @var \Aspose\Barcode\Bridge\DataMatrixParametersDTO
     */
    public $dataMatrix = null;
    /**
     * @var \Aspose\Barcode\Bridge\Code16KParametersDTO
     */
    public $code16K = null;
    /**
     * @var \Aspose\Barcode\Bridge\DotCodeParametersDTO
     */
    public $dotCode = null;
    /**
     * @var \Aspose\Barcode\Bridge\ITFParametersDTO
     */
    public $itf = null;
    /**
     * @var \Aspose\Barcode\Bridge\Pdf417ParametersDTO
     */
    public $pdf417 = null;
    /**
     * @var \Aspose\Barcode\Bridge\QrParametersDTO
     */
    public $qr = null;
    /**
     * @var \Aspose\Barcode\Bridge\SupplementParametersDTO
     */
    public $supplement = null;
    /**
     * @var \Aspose\Barcode\Bridge\MaxiCodeParametersDTO
     */
    public $maxiCode = null;
    /**
     * @var \Aspose\Barcode\Bridge\AztecParametersDTO
     */
    public $aztec = null;
    /**
     * @var \Aspose\Barcode\Bridge\Code128ParametersDTO
     */
    public $code128 = null;
    /**
     * @var \Aspose\Barcode\Bridge\CodabarParametersDTO
     */
    public $codabar = null;
    /**
     * @var \Aspose\Barcode\Bridge\CouponParametersDTO
     */
    public $coupon = null;
    /**
     * @var \Aspose\Barcode\Bridge\HanXinParametersDTO
     */
    public $hanXin = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['patchCode'])) {
                $this->patchCode = $vals['patchCode'];
            }
            if (isset($vals['barColor'])) {
                $this->barColor = $vals['barColor'];
            }
            if (isset($vals['xDimension'])) {
                $this->xDimension = $vals['xDimension'];
            }
            if (isset($vals['barWidthReduction'])) {
                $this->barWidthReduction = $vals['barWidthReduction'];
            }
            if (isset($vals['barHeight'])) {
                $this->barHeight = $vals['barHeight'];
            }
            if (isset($vals['padding'])) {
                $this->padding = $vals['padding'];
            }
            if (isset($vals['checksumAlwaysShow'])) {
                $this->checksumAlwaysShow = $vals['checksumAlwaysShow'];
            }
            if (isset($vals['isChecksumEnabled'])) {
                $this->isChecksumEnabled = $vals['isChecksumEnabled'];
            }
            if (isset($vals['enableEscape'])) {
                $this->enableEscape = $vals['enableEscape'];
            }
            if (isset($vals['throwExceptionWhenCodeTextIncorrect'])) {
                $this->throwExceptionWhenCodeTextIncorrect = $vals['throwExceptionWhenCodeTextIncorrect'];
            }
            if (isset($vals['wideNarrowRatio'])) {
                $this->wideNarrowRatio = $vals['wideNarrowRatio'];
            }
            if (isset($vals['codeTextParameters'])) {
                $this->codeTextParameters = $vals['codeTextParameters'];
            }
            if (isset($vals['filledBars'])) {
                $this->filledBars = $vals['filledBars'];
            }
            if (isset($vals['postal'])) {
                $this->postal = $vals['postal'];
            }
            if (isset($vals['australianPost'])) {
                $this->australianPost = $vals['australianPost'];
            }
            if (isset($vals['dataBar'])) {
                $this->dataBar = $vals['dataBar'];
            }
            if (isset($vals['gs1CompositeBar'])) {
                $this->gs1CompositeBar = $vals['gs1CompositeBar'];
            }
            if (isset($vals['codablock'])) {
                $this->codablock = $vals['codablock'];
            }
            if (isset($vals['dataMatrix'])) {
                $this->dataMatrix = $vals['dataMatrix'];
            }
            if (isset($vals['code16K'])) {
                $this->code16K = $vals['code16K'];
            }
            if (isset($vals['dotCode'])) {
                $this->dotCode = $vals['dotCode'];
            }
            if (isset($vals['itf'])) {
                $this->itf = $vals['itf'];
            }
            if (isset($vals['pdf417'])) {
                $this->pdf417 = $vals['pdf417'];
            }
            if (isset($vals['qr'])) {
                $this->qr = $vals['qr'];
            }
            if (isset($vals['supplement'])) {
                $this->supplement = $vals['supplement'];
            }
            if (isset($vals['maxiCode'])) {
                $this->maxiCode = $vals['maxiCode'];
            }
            if (isset($vals['aztec'])) {
                $this->aztec = $vals['aztec'];
            }
            if (isset($vals['code128'])) {
                $this->code128 = $vals['code128'];
            }
            if (isset($vals['codabar'])) {
                $this->codabar = $vals['codabar'];
            }
            if (isset($vals['coupon'])) {
                $this->coupon = $vals['coupon'];
            }
            if (isset($vals['hanXin'])) {
                $this->hanXin = $vals['hanXin'];
            }
        }
    }

    public function getName()
    {
        return 'BarcodeParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->patchCode = new \Aspose\Barcode\Bridge\PatchCodeParametersDTO();
                        $xfer += $this->patchCode->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->barColor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->xDimension = new \Aspose\Barcode\Bridge\UnitDTO();
                        $xfer += $this->xDimension->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->barWidthReduction = new \Aspose\Barcode\Bridge\UnitDTO();
                        $xfer += $this->barWidthReduction->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->barHeight = new \Aspose\Barcode\Bridge\UnitDTO();
                        $xfer += $this->barHeight->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->padding = new \Aspose\Barcode\Bridge\PaddingDTO();
                        $xfer += $this->padding->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->checksumAlwaysShow);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->isChecksumEnabled);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->enableEscape);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->throwExceptionWhenCodeTextIncorrect);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->wideNarrowRatio);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRUCT) {
                        $this->codeTextParameters = new \Aspose\Barcode\Bridge\CodetextParametersDTO();
                        $xfer += $this->codeTextParameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->filledBars);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRUCT) {
                        $this->postal = new \Aspose\Barcode\Bridge\PostalParametersDTO();
                        $xfer += $this->postal->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRUCT) {
                        $this->australianPost = new \Aspose\Barcode\Bridge\AustralianPostParametersDTO();
                        $xfer += $this->australianPost->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRUCT) {
                        $this->dataBar = new \Aspose\Barcode\Bridge\DataBarParametersDTO();
                        $xfer += $this->dataBar->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRUCT) {
                        $this->gs1CompositeBar = new \Aspose\Barcode\Bridge\GS1CompositeBarParametersDTO();
                        $xfer += $this->gs1CompositeBar->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRUCT) {
                        $this->codablock = new \Aspose\Barcode\Bridge\CodablockParametersDTO();
                        $xfer += $this->codablock->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::STRUCT) {
                        $this->dataMatrix = new \Aspose\Barcode\Bridge\DataMatrixParametersDTO();
                        $xfer += $this->dataMatrix->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRUCT) {
                        $this->code16K = new \Aspose\Barcode\Bridge\Code16KParametersDTO();
                        $xfer += $this->code16K->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::STRUCT) {
                        $this->dotCode = new \Aspose\Barcode\Bridge\DotCodeParametersDTO();
                        $xfer += $this->dotCode->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::STRUCT) {
                        $this->itf = new \Aspose\Barcode\Bridge\ITFParametersDTO();
                        $xfer += $this->itf->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::STRUCT) {
                        $this->pdf417 = new \Aspose\Barcode\Bridge\Pdf417ParametersDTO();
                        $xfer += $this->pdf417->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::STRUCT) {
                        $this->qr = new \Aspose\Barcode\Bridge\QrParametersDTO();
                        $xfer += $this->qr->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::STRUCT) {
                        $this->supplement = new \Aspose\Barcode\Bridge\SupplementParametersDTO();
                        $xfer += $this->supplement->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::STRUCT) {
                        $this->maxiCode = new \Aspose\Barcode\Bridge\MaxiCodeParametersDTO();
                        $xfer += $this->maxiCode->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::STRUCT) {
                        $this->aztec = new \Aspose\Barcode\Bridge\AztecParametersDTO();
                        $xfer += $this->aztec->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::STRUCT) {
                        $this->code128 = new \Aspose\Barcode\Bridge\Code128ParametersDTO();
                        $xfer += $this->code128->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::STRUCT) {
                        $this->codabar = new \Aspose\Barcode\Bridge\CodabarParametersDTO();
                        $xfer += $this->codabar->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::STRUCT) {
                        $this->coupon = new \Aspose\Barcode\Bridge\CouponParametersDTO();
                        $xfer += $this->coupon->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::STRUCT) {
                        $this->hanXin = new \Aspose\Barcode\Bridge\HanXinParametersDTO();
                        $xfer += $this->hanXin->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BarcodeParametersDTO');
        if ($this->patchCode !== null) {
            if (!is_object($this->patchCode)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('patchCode', TType::STRUCT, 1);
            $xfer += $this->patchCode->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->barColor !== null) {
            $xfer += $output->writeFieldBegin('barColor', TType::I32, 2);
            $xfer += $output->writeI32($this->barColor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->xDimension !== null) {
            if (!is_object($this->xDimension)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('xDimension', TType::STRUCT, 3);
            $xfer += $this->xDimension->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->barWidthReduction !== null) {
            if (!is_object($this->barWidthReduction)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('barWidthReduction', TType::STRUCT, 4);
            $xfer += $this->barWidthReduction->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->barHeight !== null) {
            if (!is_object($this->barHeight)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('barHeight', TType::STRUCT, 5);
            $xfer += $this->barHeight->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->padding !== null) {
            if (!is_object($this->padding)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('padding', TType::STRUCT, 6);
            $xfer += $this->padding->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->checksumAlwaysShow !== null) {
            $xfer += $output->writeFieldBegin('checksumAlwaysShow', TType::BOOL, 7);
            $xfer += $output->writeBool($this->checksumAlwaysShow);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isChecksumEnabled !== null) {
            $xfer += $output->writeFieldBegin('isChecksumEnabled', TType::I32, 8);
            $xfer += $output->writeI32($this->isChecksumEnabled);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->enableEscape !== null) {
            $xfer += $output->writeFieldBegin('enableEscape', TType::BOOL, 9);
            $xfer += $output->writeBool($this->enableEscape);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->throwExceptionWhenCodeTextIncorrect !== null) {
            $xfer += $output->writeFieldBegin('throwExceptionWhenCodeTextIncorrect', TType::BOOL, 10);
            $xfer += $output->writeBool($this->throwExceptionWhenCodeTextIncorrect);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->wideNarrowRatio !== null) {
            $xfer += $output->writeFieldBegin('wideNarrowRatio', TType::DOUBLE, 11);
            $xfer += $output->writeDouble($this->wideNarrowRatio);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codeTextParameters !== null) {
            if (!is_object($this->codeTextParameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('codeTextParameters', TType::STRUCT, 12);
            $xfer += $this->codeTextParameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->filledBars !== null) {
            $xfer += $output->writeFieldBegin('filledBars', TType::BOOL, 13);
            $xfer += $output->writeBool($this->filledBars);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->postal !== null) {
            if (!is_object($this->postal)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('postal', TType::STRUCT, 14);
            $xfer += $this->postal->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->australianPost !== null) {
            if (!is_object($this->australianPost)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('australianPost', TType::STRUCT, 15);
            $xfer += $this->australianPost->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataBar !== null) {
            if (!is_object($this->dataBar)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('dataBar', TType::STRUCT, 16);
            $xfer += $this->dataBar->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->gs1CompositeBar !== null) {
            if (!is_object($this->gs1CompositeBar)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('gs1CompositeBar', TType::STRUCT, 17);
            $xfer += $this->gs1CompositeBar->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codablock !== null) {
            if (!is_object($this->codablock)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('codablock', TType::STRUCT, 18);
            $xfer += $this->codablock->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataMatrix !== null) {
            if (!is_object($this->dataMatrix)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('dataMatrix', TType::STRUCT, 19);
            $xfer += $this->dataMatrix->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->code16K !== null) {
            if (!is_object($this->code16K)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('code16K', TType::STRUCT, 20);
            $xfer += $this->code16K->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dotCode !== null) {
            if (!is_object($this->dotCode)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('dotCode', TType::STRUCT, 21);
            $xfer += $this->dotCode->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->itf !== null) {
            if (!is_object($this->itf)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('itf', TType::STRUCT, 22);
            $xfer += $this->itf->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417 !== null) {
            if (!is_object($this->pdf417)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('pdf417', TType::STRUCT, 23);
            $xfer += $this->pdf417->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->qr !== null) {
            if (!is_object($this->qr)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('qr', TType::STRUCT, 24);
            $xfer += $this->qr->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->supplement !== null) {
            if (!is_object($this->supplement)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('supplement', TType::STRUCT, 25);
            $xfer += $this->supplement->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxiCode !== null) {
            if (!is_object($this->maxiCode)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('maxiCode', TType::STRUCT, 26);
            $xfer += $this->maxiCode->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->aztec !== null) {
            if (!is_object($this->aztec)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('aztec', TType::STRUCT, 27);
            $xfer += $this->aztec->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->code128 !== null) {
            if (!is_object($this->code128)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('code128', TType::STRUCT, 28);
            $xfer += $this->code128->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codabar !== null) {
            if (!is_object($this->codabar)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('codabar', TType::STRUCT, 29);
            $xfer += $this->codabar->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->coupon !== null) {
            if (!is_object($this->coupon)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('coupon', TType::STRUCT, 30);
            $xfer += $this->coupon->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hanXin !== null) {
            if (!is_object($this->hanXin)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('hanXin', TType::STRUCT, 31);
            $xfer += $this->hanXin->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

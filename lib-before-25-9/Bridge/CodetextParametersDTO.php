<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CodetextParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'twoDDisplayText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'fontMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'font',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\FontUnitDTO',
        ),
        4 => array(
            'var' => 'space',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\UnitDTO',
        ),
        5 => array(
            'var' => 'alignment',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'color',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'location',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'noWrap',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $twoDDisplayText = null;
    /**
     * @var int
     */
    public $fontMode = null;
    /**
     * @var \Aspose\Barcode\Bridge\FontUnitDTO
     */
    public $font = null;
    /**
     * @var \Aspose\Barcode\Bridge\UnitDTO
     */
    public $space = null;
    /**
     * @var int
     */
    public $alignment = null;
    /**
     * @var int
     */
    public $color = null;
    /**
     * @var int
     */
    public $location = null;
    /**
     * @var bool
     */
    public $noWrap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['twoDDisplayText'])) {
                $this->twoDDisplayText = $vals['twoDDisplayText'];
            }
            if (isset($vals['fontMode'])) {
                $this->fontMode = $vals['fontMode'];
            }
            if (isset($vals['font'])) {
                $this->font = $vals['font'];
            }
            if (isset($vals['space'])) {
                $this->space = $vals['space'];
            }
            if (isset($vals['alignment'])) {
                $this->alignment = $vals['alignment'];
            }
            if (isset($vals['color'])) {
                $this->color = $vals['color'];
            }
            if (isset($vals['location'])) {
                $this->location = $vals['location'];
            }
            if (isset($vals['noWrap'])) {
                $this->noWrap = $vals['noWrap'];
            }
        }
    }

    public function getName()
    {
        return 'CodetextParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->twoDDisplayText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->fontMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->font = new \Aspose\Barcode\Bridge\FontUnitDTO();
                        $xfer += $this->font->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->space = new \Aspose\Barcode\Bridge\UnitDTO();
                        $xfer += $this->space->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->alignment);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->color);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->location);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->noWrap);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CodetextParametersDTO');
        if ($this->twoDDisplayText !== null) {
            $xfer += $output->writeFieldBegin('twoDDisplayText', TType::STRING, 1);
            $xfer += $output->writeString($this->twoDDisplayText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fontMode !== null) {
            $xfer += $output->writeFieldBegin('fontMode', TType::I32, 2);
            $xfer += $output->writeI32($this->fontMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->font !== null) {
            if (!is_object($this->font)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('font', TType::STRUCT, 3);
            $xfer += $this->font->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->space !== null) {
            if (!is_object($this->space)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('space', TType::STRUCT, 4);
            $xfer += $this->space->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->alignment !== null) {
            $xfer += $output->writeFieldBegin('alignment', TType::I32, 5);
            $xfer += $output->writeI32($this->alignment);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->color !== null) {
            $xfer += $output->writeFieldBegin('color', TType::I32, 6);
            $xfer += $output->writeI32($this->color);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->location !== null) {
            $xfer += $output->writeFieldBegin('location', TType::I32, 7);
            $xfer += $output->writeI32($this->location);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->noWrap !== null) {
            $xfer += $output->writeFieldBegin('noWrap', TType::BOOL, 8);
            $xfer += $output->writeBool($this->noWrap);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

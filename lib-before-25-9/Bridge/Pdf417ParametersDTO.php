<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Pdf417ParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'pdf417CompactionMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'pdf417ErrorLevel',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'pdf417Truncate',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'columns',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'rows',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'aspectRatio',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        7 => array(
            'var' => 'pdf417MacroFileID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'pdf417MacroSegmentID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'pdf417MacroSegmentsCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'pdf417MacroFileName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'pdf417MacroTimeStamp',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'pdf417MacroSender',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'pdf417MacroAddressee',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'pdf417MacroFileSize',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        15 => array(
            'var' => 'pdf417MacroChecksum',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        16 => array(
            'var' => 'pdf417ECIEncoding',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        17 => array(
            'var' => 'pdf417MacroECIEncoding',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        18 => array(
            'var' => 'pdf417MacroTerminator',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        19 => array(
            'var' => 'isReaderInitialization',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        20 => array(
            'var' => 'macroCharacters',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        21 => array(
            'var' => 'isLinked',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        22 => array(
            'var' => 'isCode128Emulation',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        23 => array(
            'var' => 'pdf417EncodeMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $pdf417CompactionMode = null;
    /**
     * @var int
     */
    public $pdf417ErrorLevel = null;
    /**
     * @var bool
     */
    public $pdf417Truncate = null;
    /**
     * @var int
     */
    public $columns = null;
    /**
     * @var int
     */
    public $rows = null;
    /**
     * @var double
     */
    public $aspectRatio = null;
    /**
     * @var int
     */
    public $pdf417MacroFileID = null;
    /**
     * @var int
     */
    public $pdf417MacroSegmentID = null;
    /**
     * @var int
     */
    public $pdf417MacroSegmentsCount = null;
    /**
     * @var string
     */
    public $pdf417MacroFileName = null;
    /**
     * @var string
     */
    public $pdf417MacroTimeStamp = null;
    /**
     * @var string
     */
    public $pdf417MacroSender = null;
    /**
     * @var string
     */
    public $pdf417MacroAddressee = null;
    /**
     * @var int
     */
    public $pdf417MacroFileSize = null;
    /**
     * @var int
     */
    public $pdf417MacroChecksum = null;
    /**
     * @var int
     */
    public $pdf417ECIEncoding = null;
    /**
     * @var int
     */
    public $pdf417MacroECIEncoding = null;
    /**
     * @var int
     */
    public $pdf417MacroTerminator = null;
    /**
     * @var bool
     */
    public $isReaderInitialization = null;
    /**
     * @var int
     */
    public $macroCharacters = null;
    /**
     * @var bool
     */
    public $isLinked = null;
    /**
     * @var bool
     */
    public $isCode128Emulation = null;
    /**
     * @var int
     */
    public $pdf417EncodeMode = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['pdf417CompactionMode'])) {
                $this->pdf417CompactionMode = $vals['pdf417CompactionMode'];
            }
            if (isset($vals['pdf417ErrorLevel'])) {
                $this->pdf417ErrorLevel = $vals['pdf417ErrorLevel'];
            }
            if (isset($vals['pdf417Truncate'])) {
                $this->pdf417Truncate = $vals['pdf417Truncate'];
            }
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }
            if (isset($vals['rows'])) {
                $this->rows = $vals['rows'];
            }
            if (isset($vals['aspectRatio'])) {
                $this->aspectRatio = $vals['aspectRatio'];
            }
            if (isset($vals['pdf417MacroFileID'])) {
                $this->pdf417MacroFileID = $vals['pdf417MacroFileID'];
            }
            if (isset($vals['pdf417MacroSegmentID'])) {
                $this->pdf417MacroSegmentID = $vals['pdf417MacroSegmentID'];
            }
            if (isset($vals['pdf417MacroSegmentsCount'])) {
                $this->pdf417MacroSegmentsCount = $vals['pdf417MacroSegmentsCount'];
            }
            if (isset($vals['pdf417MacroFileName'])) {
                $this->pdf417MacroFileName = $vals['pdf417MacroFileName'];
            }
            if (isset($vals['pdf417MacroTimeStamp'])) {
                $this->pdf417MacroTimeStamp = $vals['pdf417MacroTimeStamp'];
            }
            if (isset($vals['pdf417MacroSender'])) {
                $this->pdf417MacroSender = $vals['pdf417MacroSender'];
            }
            if (isset($vals['pdf417MacroAddressee'])) {
                $this->pdf417MacroAddressee = $vals['pdf417MacroAddressee'];
            }
            if (isset($vals['pdf417MacroFileSize'])) {
                $this->pdf417MacroFileSize = $vals['pdf417MacroFileSize'];
            }
            if (isset($vals['pdf417MacroChecksum'])) {
                $this->pdf417MacroChecksum = $vals['pdf417MacroChecksum'];
            }
            if (isset($vals['pdf417ECIEncoding'])) {
                $this->pdf417ECIEncoding = $vals['pdf417ECIEncoding'];
            }
            if (isset($vals['pdf417MacroECIEncoding'])) {
                $this->pdf417MacroECIEncoding = $vals['pdf417MacroECIEncoding'];
            }
            if (isset($vals['pdf417MacroTerminator'])) {
                $this->pdf417MacroTerminator = $vals['pdf417MacroTerminator'];
            }
            if (isset($vals['isReaderInitialization'])) {
                $this->isReaderInitialization = $vals['isReaderInitialization'];
            }
            if (isset($vals['macroCharacters'])) {
                $this->macroCharacters = $vals['macroCharacters'];
            }
            if (isset($vals['isLinked'])) {
                $this->isLinked = $vals['isLinked'];
            }
            if (isset($vals['isCode128Emulation'])) {
                $this->isCode128Emulation = $vals['isCode128Emulation'];
            }
            if (isset($vals['pdf417EncodeMode'])) {
                $this->pdf417EncodeMode = $vals['pdf417EncodeMode'];
            }
        }
    }

    public function getName()
    {
        return 'Pdf417ParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417CompactionMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417ErrorLevel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->pdf417Truncate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->columns);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->rows);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->aspectRatio);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417MacroFileID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417MacroSegmentID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417MacroSegmentsCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pdf417MacroFileName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pdf417MacroTimeStamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pdf417MacroSender);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pdf417MacroAddressee);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417MacroFileSize);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417MacroChecksum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417ECIEncoding);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417MacroECIEncoding);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417MacroTerminator);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isReaderInitialization);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->macroCharacters);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isLinked);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isCode128Emulation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->pdf417EncodeMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Pdf417ParametersDTO');
        if ($this->pdf417CompactionMode !== null) {
            $xfer += $output->writeFieldBegin('pdf417CompactionMode', TType::I32, 1);
            $xfer += $output->writeI32($this->pdf417CompactionMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417ErrorLevel !== null) {
            $xfer += $output->writeFieldBegin('pdf417ErrorLevel', TType::I32, 2);
            $xfer += $output->writeI32($this->pdf417ErrorLevel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417Truncate !== null) {
            $xfer += $output->writeFieldBegin('pdf417Truncate', TType::BOOL, 3);
            $xfer += $output->writeBool($this->pdf417Truncate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->columns !== null) {
            $xfer += $output->writeFieldBegin('columns', TType::I32, 4);
            $xfer += $output->writeI32($this->columns);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rows !== null) {
            $xfer += $output->writeFieldBegin('rows', TType::I32, 5);
            $xfer += $output->writeI32($this->rows);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->aspectRatio !== null) {
            $xfer += $output->writeFieldBegin('aspectRatio', TType::DOUBLE, 6);
            $xfer += $output->writeDouble($this->aspectRatio);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroFileID !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroFileID', TType::I32, 7);
            $xfer += $output->writeI32($this->pdf417MacroFileID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroSegmentID !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroSegmentID', TType::I32, 8);
            $xfer += $output->writeI32($this->pdf417MacroSegmentID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroSegmentsCount !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroSegmentsCount', TType::I32, 9);
            $xfer += $output->writeI32($this->pdf417MacroSegmentsCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroFileName !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroFileName', TType::STRING, 10);
            $xfer += $output->writeString($this->pdf417MacroFileName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroTimeStamp !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroTimeStamp', TType::STRING, 11);
            $xfer += $output->writeString($this->pdf417MacroTimeStamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroSender !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroSender', TType::STRING, 12);
            $xfer += $output->writeString($this->pdf417MacroSender);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroAddressee !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroAddressee', TType::STRING, 13);
            $xfer += $output->writeString($this->pdf417MacroAddressee);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroFileSize !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroFileSize', TType::I32, 14);
            $xfer += $output->writeI32($this->pdf417MacroFileSize);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroChecksum !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroChecksum', TType::I32, 15);
            $xfer += $output->writeI32($this->pdf417MacroChecksum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417ECIEncoding !== null) {
            $xfer += $output->writeFieldBegin('pdf417ECIEncoding', TType::I32, 16);
            $xfer += $output->writeI32($this->pdf417ECIEncoding);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroECIEncoding !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroECIEncoding', TType::I32, 17);
            $xfer += $output->writeI32($this->pdf417MacroECIEncoding);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417MacroTerminator !== null) {
            $xfer += $output->writeFieldBegin('pdf417MacroTerminator', TType::I32, 18);
            $xfer += $output->writeI32($this->pdf417MacroTerminator);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isReaderInitialization !== null) {
            $xfer += $output->writeFieldBegin('isReaderInitialization', TType::BOOL, 19);
            $xfer += $output->writeBool($this->isReaderInitialization);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroCharacters !== null) {
            $xfer += $output->writeFieldBegin('macroCharacters', TType::I32, 20);
            $xfer += $output->writeI32($this->macroCharacters);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isLinked !== null) {
            $xfer += $output->writeFieldBegin('isLinked', TType::BOOL, 21);
            $xfer += $output->writeBool($this->isLinked);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isCode128Emulation !== null) {
            $xfer += $output->writeFieldBegin('isCode128Emulation', TType::BOOL, 22);
            $xfer += $output->writeBool($this->isCode128Emulation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pdf417EncodeMode !== null) {
            $xfer += $output->writeFieldBegin('pdf417EncodeMode', TType::I32, 23);
            $xfer += $output->writeI32($this->pdf417EncodeMode);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

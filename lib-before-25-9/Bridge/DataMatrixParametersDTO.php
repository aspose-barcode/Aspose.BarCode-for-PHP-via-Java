<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class DataMatrixParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'dataMatrixVersion',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'dataMatrixEcc',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'dataMatrixEncodeMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'structuredAppendBarcodeId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'structuredAppendBarcodesCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'structuredAppendFileId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'isReaderProgramming',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'macroCharacters',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'columns',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'rows',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'aspectRatio',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        12 => array(
            'var' => 'eCIEncoding',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $dataMatrixVersion = null;
    /**
     * @var int
     */
    public $dataMatrixEcc = null;
    /**
     * @var int
     */
    public $dataMatrixEncodeMode = null;
    /**
     * @var int
     */
    public $structuredAppendBarcodeId = null;
    /**
     * @var int
     */
    public $structuredAppendBarcodesCount = null;
    /**
     * @var int
     */
    public $structuredAppendFileId = null;
    /**
     * @var bool
     */
    public $isReaderProgramming = null;
    /**
     * @var int
     */
    public $macroCharacters = null;
    /**
     * @var int
     */
    public $columns = null;
    /**
     * @var int
     */
    public $rows = null;
    /**
     * @var double
     */
    public $aspectRatio = null;
    /**
     * @var int
     */
    public $eCIEncoding = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['dataMatrixVersion'])) {
                $this->dataMatrixVersion = $vals['dataMatrixVersion'];
            }
            if (isset($vals['dataMatrixEcc'])) {
                $this->dataMatrixEcc = $vals['dataMatrixEcc'];
            }
            if (isset($vals['dataMatrixEncodeMode'])) {
                $this->dataMatrixEncodeMode = $vals['dataMatrixEncodeMode'];
            }
            if (isset($vals['structuredAppendBarcodeId'])) {
                $this->structuredAppendBarcodeId = $vals['structuredAppendBarcodeId'];
            }
            if (isset($vals['structuredAppendBarcodesCount'])) {
                $this->structuredAppendBarcodesCount = $vals['structuredAppendBarcodesCount'];
            }
            if (isset($vals['structuredAppendFileId'])) {
                $this->structuredAppendFileId = $vals['structuredAppendFileId'];
            }
            if (isset($vals['isReaderProgramming'])) {
                $this->isReaderProgramming = $vals['isReaderProgramming'];
            }
            if (isset($vals['macroCharacters'])) {
                $this->macroCharacters = $vals['macroCharacters'];
            }
            if (isset($vals['columns'])) {
                $this->columns = $vals['columns'];
            }
            if (isset($vals['rows'])) {
                $this->rows = $vals['rows'];
            }
            if (isset($vals['aspectRatio'])) {
                $this->aspectRatio = $vals['aspectRatio'];
            }
            if (isset($vals['eCIEncoding'])) {
                $this->eCIEncoding = $vals['eCIEncoding'];
            }
        }
    }

    public function getName()
    {
        return 'DataMatrixParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->dataMatrixVersion);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->dataMatrixEcc);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->dataMatrixEncodeMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->structuredAppendBarcodeId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->structuredAppendBarcodesCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->structuredAppendFileId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isReaderProgramming);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->macroCharacters);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->columns);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->rows);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->aspectRatio);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->eCIEncoding);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('DataMatrixParametersDTO');
        if ($this->dataMatrixVersion !== null) {
            $xfer += $output->writeFieldBegin('dataMatrixVersion', TType::I32, 1);
            $xfer += $output->writeI32($this->dataMatrixVersion);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataMatrixEcc !== null) {
            $xfer += $output->writeFieldBegin('dataMatrixEcc', TType::I32, 2);
            $xfer += $output->writeI32($this->dataMatrixEcc);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataMatrixEncodeMode !== null) {
            $xfer += $output->writeFieldBegin('dataMatrixEncodeMode', TType::I32, 3);
            $xfer += $output->writeI32($this->dataMatrixEncodeMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->structuredAppendBarcodeId !== null) {
            $xfer += $output->writeFieldBegin('structuredAppendBarcodeId', TType::I32, 4);
            $xfer += $output->writeI32($this->structuredAppendBarcodeId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->structuredAppendBarcodesCount !== null) {
            $xfer += $output->writeFieldBegin('structuredAppendBarcodesCount', TType::I32, 5);
            $xfer += $output->writeI32($this->structuredAppendBarcodesCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->structuredAppendFileId !== null) {
            $xfer += $output->writeFieldBegin('structuredAppendFileId', TType::I32, 6);
            $xfer += $output->writeI32($this->structuredAppendFileId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isReaderProgramming !== null) {
            $xfer += $output->writeFieldBegin('isReaderProgramming', TType::BOOL, 7);
            $xfer += $output->writeBool($this->isReaderProgramming);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroCharacters !== null) {
            $xfer += $output->writeFieldBegin('macroCharacters', TType::I32, 8);
            $xfer += $output->writeI32($this->macroCharacters);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->columns !== null) {
            $xfer += $output->writeFieldBegin('columns', TType::I32, 9);
            $xfer += $output->writeI32($this->columns);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rows !== null) {
            $xfer += $output->writeFieldBegin('rows', TType::I32, 10);
            $xfer += $output->writeI32($this->rows);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->aspectRatio !== null) {
            $xfer += $output->writeFieldBegin('aspectRatio', TType::DOUBLE, 11);
            $xfer += $output->writeDouble($this->aspectRatio);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->eCIEncoding !== null) {
            $xfer += $output->writeFieldBegin('eCIEncoding', TType::I32, 12);
            $xfer += $output->writeI32($this->eCIEncoding);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

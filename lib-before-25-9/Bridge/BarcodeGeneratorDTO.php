<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BarcodeGeneratorDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'barcodeType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'base64CodeText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'encoding',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'codeTextType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'parameters',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\BaseGenerationParametersDTO',
        ),
        6 => array(
            'var' => 'insertBOM',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var int
     */
    public $barcodeType = null;
    /**
     * @var string
     */
    public $base64CodeText = null;
    /**
     * @var string
     */
    public $encoding = null;
    /**
     * @var int
     */
    public $codeTextType = null;
    /**
     * @var \Aspose\Barcode\Bridge\BaseGenerationParametersDTO
     */
    public $parameters = null;
    /**
     * @var bool
     */
    public $insertBOM = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['barcodeType'])) {
                $this->barcodeType = $vals['barcodeType'];
            }
            if (isset($vals['base64CodeText'])) {
                $this->base64CodeText = $vals['base64CodeText'];
            }
            if (isset($vals['encoding'])) {
                $this->encoding = $vals['encoding'];
            }
            if (isset($vals['codeTextType'])) {
                $this->codeTextType = $vals['codeTextType'];
            }
            if (isset($vals['parameters'])) {
                $this->parameters = $vals['parameters'];
            }
            if (isset($vals['insertBOM'])) {
                $this->insertBOM = $vals['insertBOM'];
            }
        }
    }

    public function getName()
    {
        return 'BarcodeGeneratorDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->barcodeType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->base64CodeText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->encoding);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->codeTextType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->parameters = new \Aspose\Barcode\Bridge\BaseGenerationParametersDTO();
                        $xfer += $this->parameters->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->insertBOM);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BarcodeGeneratorDTO');
        if ($this->barcodeType !== null) {
            $xfer += $output->writeFieldBegin('barcodeType', TType::I32, 1);
            $xfer += $output->writeI32($this->barcodeType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->base64CodeText !== null) {
            $xfer += $output->writeFieldBegin('base64CodeText', TType::STRING, 2);
            $xfer += $output->writeString($this->base64CodeText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->encoding !== null) {
            $xfer += $output->writeFieldBegin('encoding', TType::STRING, 3);
            $xfer += $output->writeString($this->encoding);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codeTextType !== null) {
            $xfer += $output->writeFieldBegin('codeTextType', TType::I32, 4);
            $xfer += $output->writeI32($this->codeTextType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->parameters !== null) {
            if (!is_object($this->parameters)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('parameters', TType::STRUCT, 5);
            $xfer += $this->parameters->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->insertBOM !== null) {
            $xfer += $output->writeFieldBegin('insertBOM', TType::BOOL, 6);
            $xfer += $output->writeBool($this->insertBOM);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class QuadrangleDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'leftTop',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\PointDTO',
        ),
        2 => array(
            'var' => 'rightTop',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\PointDTO',
        ),
        3 => array(
            'var' => 'rightBottom',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\PointDTO',
        ),
        4 => array(
            'var' => 'leftBottom',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\PointDTO',
        ),
        5 => array(
            'var' => 'isEmpty',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var \Aspose\Barcode\Bridge\PointDTO
     */
    public $leftTop = null;
    /**
     * @var \Aspose\Barcode\Bridge\PointDTO
     */
    public $rightTop = null;
    /**
     * @var \Aspose\Barcode\Bridge\PointDTO
     */
    public $rightBottom = null;
    /**
     * @var \Aspose\Barcode\Bridge\PointDTO
     */
    public $leftBottom = null;
    /**
     * @var bool
     */
    public $isEmpty = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['leftTop'])) {
                $this->leftTop = $vals['leftTop'];
            }
            if (isset($vals['rightTop'])) {
                $this->rightTop = $vals['rightTop'];
            }
            if (isset($vals['rightBottom'])) {
                $this->rightBottom = $vals['rightBottom'];
            }
            if (isset($vals['leftBottom'])) {
                $this->leftBottom = $vals['leftBottom'];
            }
            if (isset($vals['isEmpty'])) {
                $this->isEmpty = $vals['isEmpty'];
            }
        }
    }

    public function getName()
    {
        return 'QuadrangleDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->leftTop = new \Aspose\Barcode\Bridge\PointDTO();
                        $xfer += $this->leftTop->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->rightTop = new \Aspose\Barcode\Bridge\PointDTO();
                        $xfer += $this->rightTop->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->rightBottom = new \Aspose\Barcode\Bridge\PointDTO();
                        $xfer += $this->rightBottom->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->leftBottom = new \Aspose\Barcode\Bridge\PointDTO();
                        $xfer += $this->leftBottom->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isEmpty);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('QuadrangleDTO');
        if ($this->leftTop !== null) {
            if (!is_object($this->leftTop)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('leftTop', TType::STRUCT, 1);
            $xfer += $this->leftTop->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rightTop !== null) {
            if (!is_object($this->rightTop)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('rightTop', TType::STRUCT, 2);
            $xfer += $this->rightTop->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rightBottom !== null) {
            if (!is_object($this->rightBottom)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('rightBottom', TType::STRUCT, 3);
            $xfer += $this->rightBottom->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->leftBottom !== null) {
            if (!is_object($this->leftBottom)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('leftBottom', TType::STRUCT, 4);
            $xfer += $this->leftBottom->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isEmpty !== null) {
            $xfer += $output->writeFieldBegin('isEmpty', TType::BOOL, 5);
            $xfer += $output->writeBool($this->isEmpty);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

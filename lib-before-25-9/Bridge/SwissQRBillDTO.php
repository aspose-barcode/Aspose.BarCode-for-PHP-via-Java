<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SwissQRBillDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'creditor',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\AddressDTO',
        ),
        2 => array(
            'var' => 'debtor',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\AddressDTO',
        ),
        3 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'amount',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        5 => array(
            'var' => 'currency',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'account',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'reference',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'UnstructuredMessage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'billInformation',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'alternativeSchemes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Aspose\Barcode\Bridge\AlternativeSchemeDTO',
                ),
        ),
    );

    /**
     * @var \Aspose\Barcode\Bridge\AddressDTO
     */
    public $creditor = null;
    /**
     * @var \Aspose\Barcode\Bridge\AddressDTO
     */
    public $debtor = null;
    /**
     * @var int
     */
    public $version = null;
    /**
     * @var double
     */
    public $amount = null;
    /**
     * @var string
     */
    public $currency = null;
    /**
     * @var string
     */
    public $account = null;
    /**
     * @var string
     */
    public $reference = null;
    /**
     * @var string
     */
    public $UnstructuredMessage = null;
    /**
     * @var string
     */
    public $billInformation = null;
    /**
     * @var \Aspose\Barcode\Bridge\AlternativeSchemeDTO[]
     */
    public $alternativeSchemes = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['creditor'])) {
                $this->creditor = $vals['creditor'];
            }
            if (isset($vals['debtor'])) {
                $this->debtor = $vals['debtor'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['amount'])) {
                $this->amount = $vals['amount'];
            }
            if (isset($vals['currency'])) {
                $this->currency = $vals['currency'];
            }
            if (isset($vals['account'])) {
                $this->account = $vals['account'];
            }
            if (isset($vals['reference'])) {
                $this->reference = $vals['reference'];
            }
            if (isset($vals['UnstructuredMessage'])) {
                $this->UnstructuredMessage = $vals['UnstructuredMessage'];
            }
            if (isset($vals['billInformation'])) {
                $this->billInformation = $vals['billInformation'];
            }
            if (isset($vals['alternativeSchemes'])) {
                $this->alternativeSchemes = $vals['alternativeSchemes'];
            }
        }
    }

    public function getName()
    {
        return 'SwissQRBillDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->creditor = new \Aspose\Barcode\Bridge\AddressDTO();
                        $xfer += $this->creditor->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->debtor = new \Aspose\Barcode\Bridge\AddressDTO();
                        $xfer += $this->debtor->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->amount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->currency);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->account);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->reference);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->UnstructuredMessage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->billInformation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->alternativeSchemes = array();
                        $_size49 = 0;
                        $_etype52 = 0;
                        $xfer += $input->readListBegin($_etype52, $_size49);
                        for ($_i53 = 0; $_i53 < $_size49; ++$_i53) {
                            $elem54 = null;
                            $elem54 = new \Aspose\Barcode\Bridge\AlternativeSchemeDTO();
                            $xfer += $elem54->read($input);
                            $this->alternativeSchemes []= $elem54;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SwissQRBillDTO');
        if ($this->creditor !== null) {
            if (!is_object($this->creditor)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('creditor', TType::STRUCT, 1);
            $xfer += $this->creditor->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->debtor !== null) {
            if (!is_object($this->debtor)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('debtor', TType::STRUCT, 2);
            $xfer += $this->debtor->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::I32, 3);
            $xfer += $output->writeI32($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->amount !== null) {
            $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 4);
            $xfer += $output->writeDouble($this->amount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currency !== null) {
            $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
            $xfer += $output->writeString($this->currency);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->account !== null) {
            $xfer += $output->writeFieldBegin('account', TType::STRING, 6);
            $xfer += $output->writeString($this->account);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reference !== null) {
            $xfer += $output->writeFieldBegin('reference', TType::STRING, 7);
            $xfer += $output->writeString($this->reference);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UnstructuredMessage !== null) {
            $xfer += $output->writeFieldBegin('UnstructuredMessage', TType::STRING, 8);
            $xfer += $output->writeString($this->UnstructuredMessage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->billInformation !== null) {
            $xfer += $output->writeFieldBegin('billInformation', TType::STRING, 9);
            $xfer += $output->writeString($this->billInformation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->alternativeSchemes !== null) {
            if (!is_array($this->alternativeSchemes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('alternativeSchemes', TType::LST, 10);
            $output->writeListBegin(TType::STRUCT, count($this->alternativeSchemes));
            foreach ($this->alternativeSchemes as $iter55) {
                $xfer += $iter55->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

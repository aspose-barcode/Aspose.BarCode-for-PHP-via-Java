<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class QualitySettingsDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'xDimension',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'minimalXDimension',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        3 => array(
            'var' => 'barcodeQuality',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'deconvolution',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'inverseImage',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'complexBackground',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'allowIncorrectBarcodes',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var int
     */
    public $xDimension = null;
    /**
     * @var double
     */
    public $minimalXDimension = null;
    /**
     * @var int
     */
    public $barcodeQuality = null;
    /**
     * @var int
     */
    public $deconvolution = null;
    /**
     * @var int
     */
    public $inverseImage = null;
    /**
     * @var int
     */
    public $complexBackground = null;
    /**
     * @var bool
     */
    public $allowIncorrectBarcodes = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['xDimension'])) {
                $this->xDimension = $vals['xDimension'];
            }
            if (isset($vals['minimalXDimension'])) {
                $this->minimalXDimension = $vals['minimalXDimension'];
            }
            if (isset($vals['barcodeQuality'])) {
                $this->barcodeQuality = $vals['barcodeQuality'];
            }
            if (isset($vals['deconvolution'])) {
                $this->deconvolution = $vals['deconvolution'];
            }
            if (isset($vals['inverseImage'])) {
                $this->inverseImage = $vals['inverseImage'];
            }
            if (isset($vals['complexBackground'])) {
                $this->complexBackground = $vals['complexBackground'];
            }
            if (isset($vals['allowIncorrectBarcodes'])) {
                $this->allowIncorrectBarcodes = $vals['allowIncorrectBarcodes'];
            }
        }
    }

    public function getName()
    {
        return 'QualitySettingsDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->xDimension);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->minimalXDimension);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->barcodeQuality);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->deconvolution);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->inverseImage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->complexBackground);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->allowIncorrectBarcodes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('QualitySettingsDTO');
        if ($this->xDimension !== null) {
            $xfer += $output->writeFieldBegin('xDimension', TType::I32, 1);
            $xfer += $output->writeI32($this->xDimension);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->minimalXDimension !== null) {
            $xfer += $output->writeFieldBegin('minimalXDimension', TType::DOUBLE, 2);
            $xfer += $output->writeDouble($this->minimalXDimension);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->barcodeQuality !== null) {
            $xfer += $output->writeFieldBegin('barcodeQuality', TType::I32, 3);
            $xfer += $output->writeI32($this->barcodeQuality);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->deconvolution !== null) {
            $xfer += $output->writeFieldBegin('deconvolution', TType::I32, 4);
            $xfer += $output->writeI32($this->deconvolution);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->inverseImage !== null) {
            $xfer += $output->writeFieldBegin('inverseImage', TType::I32, 5);
            $xfer += $output->writeI32($this->inverseImage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->complexBackground !== null) {
            $xfer += $output->writeFieldBegin('complexBackground', TType::I32, 6);
            $xfer += $output->writeI32($this->complexBackground);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->allowIncorrectBarcodes !== null) {
            $xfer += $output->writeFieldBegin('allowIncorrectBarcodes', TType::BOOL, 7);
            $xfer += $output->writeBool($this->allowIncorrectBarcodes);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

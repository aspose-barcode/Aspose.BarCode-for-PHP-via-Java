<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BaseGenerationParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'useAntiAlias',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'backColor',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'resolution',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        4 => array(
            'var' => 'image',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\ImageParametersDTO',
        ),
        5 => array(
            'var' => 'autoSizeMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'imageHeight',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\UnitDTO',
        ),
        7 => array(
            'var' => 'imageWidth',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\UnitDTO',
        ),
        8 => array(
            'var' => 'rotationAngle',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        9 => array(
            'var' => 'captionAbove',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\CaptionParametersDTO',
        ),
        10 => array(
            'var' => 'captionBelow',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\CaptionParametersDTO',
        ),
        11 => array(
            'var' => 'barcode',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\BarcodeParametersDTO',
        ),
        12 => array(
            'var' => 'border',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\BorderParametersDTO',
        ),
    );

    /**
     * @var bool
     */
    public $useAntiAlias = null;
    /**
     * @var int
     */
    public $backColor = null;
    /**
     * @var double
     */
    public $resolution = null;
    /**
     * @var \Aspose\Barcode\Bridge\ImageParametersDTO
     */
    public $image = null;
    /**
     * @var int
     */
    public $autoSizeMode = null;
    /**
     * @var \Aspose\Barcode\Bridge\UnitDTO
     */
    public $imageHeight = null;
    /**
     * @var \Aspose\Barcode\Bridge\UnitDTO
     */
    public $imageWidth = null;
    /**
     * @var double
     */
    public $rotationAngle = null;
    /**
     * @var \Aspose\Barcode\Bridge\CaptionParametersDTO
     */
    public $captionAbove = null;
    /**
     * @var \Aspose\Barcode\Bridge\CaptionParametersDTO
     */
    public $captionBelow = null;
    /**
     * @var \Aspose\Barcode\Bridge\BarcodeParametersDTO
     */
    public $barcode = null;
    /**
     * @var \Aspose\Barcode\Bridge\BorderParametersDTO
     */
    public $border = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['useAntiAlias'])) {
                $this->useAntiAlias = $vals['useAntiAlias'];
            }
            if (isset($vals['backColor'])) {
                $this->backColor = $vals['backColor'];
            }
            if (isset($vals['resolution'])) {
                $this->resolution = $vals['resolution'];
            }
            if (isset($vals['image'])) {
                $this->image = $vals['image'];
            }
            if (isset($vals['autoSizeMode'])) {
                $this->autoSizeMode = $vals['autoSizeMode'];
            }
            if (isset($vals['imageHeight'])) {
                $this->imageHeight = $vals['imageHeight'];
            }
            if (isset($vals['imageWidth'])) {
                $this->imageWidth = $vals['imageWidth'];
            }
            if (isset($vals['rotationAngle'])) {
                $this->rotationAngle = $vals['rotationAngle'];
            }
            if (isset($vals['captionAbove'])) {
                $this->captionAbove = $vals['captionAbove'];
            }
            if (isset($vals['captionBelow'])) {
                $this->captionBelow = $vals['captionBelow'];
            }
            if (isset($vals['barcode'])) {
                $this->barcode = $vals['barcode'];
            }
            if (isset($vals['border'])) {
                $this->border = $vals['border'];
            }
        }
    }

    public function getName()
    {
        return 'BaseGenerationParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->useAntiAlias);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->backColor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->resolution);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->image = new \Aspose\Barcode\Bridge\ImageParametersDTO();
                        $xfer += $this->image->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->autoSizeMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->imageHeight = new \Aspose\Barcode\Bridge\UnitDTO();
                        $xfer += $this->imageHeight->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->imageWidth = new \Aspose\Barcode\Bridge\UnitDTO();
                        $xfer += $this->imageWidth->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->rotationAngle);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRUCT) {
                        $this->captionAbove = new \Aspose\Barcode\Bridge\CaptionParametersDTO();
                        $xfer += $this->captionAbove->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->captionBelow = new \Aspose\Barcode\Bridge\CaptionParametersDTO();
                        $xfer += $this->captionBelow->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRUCT) {
                        $this->barcode = new \Aspose\Barcode\Bridge\BarcodeParametersDTO();
                        $xfer += $this->barcode->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRUCT) {
                        $this->border = new \Aspose\Barcode\Bridge\BorderParametersDTO();
                        $xfer += $this->border->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BaseGenerationParametersDTO');
        if ($this->useAntiAlias !== null) {
            $xfer += $output->writeFieldBegin('useAntiAlias', TType::BOOL, 1);
            $xfer += $output->writeBool($this->useAntiAlias);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backColor !== null) {
            $xfer += $output->writeFieldBegin('backColor', TType::I32, 2);
            $xfer += $output->writeI32($this->backColor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->resolution !== null) {
            $xfer += $output->writeFieldBegin('resolution', TType::DOUBLE, 3);
            $xfer += $output->writeDouble($this->resolution);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->image !== null) {
            if (!is_object($this->image)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('image', TType::STRUCT, 4);
            $xfer += $this->image->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->autoSizeMode !== null) {
            $xfer += $output->writeFieldBegin('autoSizeMode', TType::I32, 5);
            $xfer += $output->writeI32($this->autoSizeMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->imageHeight !== null) {
            if (!is_object($this->imageHeight)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('imageHeight', TType::STRUCT, 6);
            $xfer += $this->imageHeight->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->imageWidth !== null) {
            if (!is_object($this->imageWidth)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('imageWidth', TType::STRUCT, 7);
            $xfer += $this->imageWidth->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rotationAngle !== null) {
            $xfer += $output->writeFieldBegin('rotationAngle', TType::DOUBLE, 8);
            $xfer += $output->writeDouble($this->rotationAngle);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->captionAbove !== null) {
            if (!is_object($this->captionAbove)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('captionAbove', TType::STRUCT, 9);
            $xfer += $this->captionAbove->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->captionBelow !== null) {
            if (!is_object($this->captionBelow)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('captionBelow', TType::STRUCT, 10);
            $xfer += $this->captionBelow->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->barcode !== null) {
            if (!is_object($this->barcode)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('barcode', TType::STRUCT, 11);
            $xfer += $this->barcode->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->border !== null) {
            if (!is_object($this->border)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('border', TType::STRUCT, 12);
            $xfer += $this->border->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

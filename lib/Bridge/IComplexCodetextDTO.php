<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class IComplexCodetextDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'primaryData',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\PrimaryDataDTO',
        ),
        2 => array(
            'var' => 'secondaryAndAdditionalData',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO',
        ),
        3 => array(
            'var' => 'barcodeType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'linkCharacter',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'dataLocation',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'class_',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'customerContent',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'customerContentEncodeMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'dataMatrixType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'itemID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'destinationPostCodeAndDPS',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'informationTypeID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'returnToSenderPostCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'RTSFlag',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'supplyChainID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        16 => array(
            'var' => 'UPUCountryID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'versionID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        18 => array(
            'var' => 'format',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        20 => array(
            'var' => 'destinationPostCodePlusDPS',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        21 => array(
            'var' => 'countryCode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        22 => array(
            'var' => 'serviceCategory',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        23 => array(
            'var' => 'maxiCodeEncodeMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        24 => array(
            'var' => 'ECIEncoding',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        25 => array(
            'var' => 'message',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        26 => array(
            'var' => 'mode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        27 => array(
            'var' => 'bill',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\SwissQRBillDTO',
        ),
        28 => array(
            'var' => 'records',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Aspose\Barcode\Bridge\HIBCPASRecordDTO',
                ),
        ),
        29 => array(
            'var' => 'secondMessage',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO',
        ),
        30 => array(
            'var' => 'postalCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        31 => array(
            'var' => 'isNull',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        32 => array(
            'var' => 'complexCodetextType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var \Aspose\Barcode\Bridge\PrimaryDataDTO
     */
    public $primaryData = null;
    /**
     * @var \Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO
     */
    public $secondaryAndAdditionalData = null;
    /**
     * @var int
     */
    public $barcodeType = null;
    /**
     * @var string
     */
    public $linkCharacter = null;
    /**
     * @var int
     */
    public $dataLocation = null;
    /**
     * @var string
     */
    public $class_ = null;
    /**
     * @var string
     */
    public $customerContent = null;
    /**
     * @var int
     */
    public $customerContentEncodeMode = null;
    /**
     * @var int
     */
    public $dataMatrixType = null;
    /**
     * @var int
     */
    public $itemID = null;
    /**
     * @var string
     */
    public $destinationPostCodeAndDPS = null;
    /**
     * @var string
     */
    public $informationTypeID = null;
    /**
     * @var string
     */
    public $returnToSenderPostCode = null;
    /**
     * @var string
     */
    public $RTSFlag = null;
    /**
     * @var int
     */
    public $supplyChainID = null;
    /**
     * @var string
     */
    public $UPUCountryID = null;
    /**
     * @var int
     */
    public $versionID = null;
    /**
     * @var int
     */
    public $format = null;
    /**
     * @var string
     */
    public $destinationPostCodePlusDPS = null;
    /**
     * @var int
     */
    public $countryCode = null;
    /**
     * @var int
     */
    public $serviceCategory = null;
    /**
     * @var int
     */
    public $maxiCodeEncodeMode = null;
    /**
     * @var int
     */
    public $ECIEncoding = null;
    /**
     * @var string
     */
    public $message = null;
    /**
     * @var int
     */
    public $mode = null;
    /**
     * @var \Aspose\Barcode\Bridge\SwissQRBillDTO
     */
    public $bill = null;
    /**
     * @var \Aspose\Barcode\Bridge\HIBCPASRecordDTO[]
     */
    public $records = null;
    /**
     * @var \Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO
     */
    public $secondMessage = null;
    /**
     * @var string
     */
    public $postalCode = null;
    /**
     * @var bool
     */
    public $isNull = null;
    /**
     * @var int
     */
    public $complexCodetextType = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['primaryData'])) {
                $this->primaryData = $vals['primaryData'];
            }
            if (isset($vals['secondaryAndAdditionalData'])) {
                $this->secondaryAndAdditionalData = $vals['secondaryAndAdditionalData'];
            }
            if (isset($vals['barcodeType'])) {
                $this->barcodeType = $vals['barcodeType'];
            }
            if (isset($vals['linkCharacter'])) {
                $this->linkCharacter = $vals['linkCharacter'];
            }
            if (isset($vals['dataLocation'])) {
                $this->dataLocation = $vals['dataLocation'];
            }
            if (isset($vals['class_'])) {
                $this->class_ = $vals['class_'];
            }
            if (isset($vals['customerContent'])) {
                $this->customerContent = $vals['customerContent'];
            }
            if (isset($vals['customerContentEncodeMode'])) {
                $this->customerContentEncodeMode = $vals['customerContentEncodeMode'];
            }
            if (isset($vals['dataMatrixType'])) {
                $this->dataMatrixType = $vals['dataMatrixType'];
            }
            if (isset($vals['itemID'])) {
                $this->itemID = $vals['itemID'];
            }
            if (isset($vals['destinationPostCodeAndDPS'])) {
                $this->destinationPostCodeAndDPS = $vals['destinationPostCodeAndDPS'];
            }
            if (isset($vals['informationTypeID'])) {
                $this->informationTypeID = $vals['informationTypeID'];
            }
            if (isset($vals['returnToSenderPostCode'])) {
                $this->returnToSenderPostCode = $vals['returnToSenderPostCode'];
            }
            if (isset($vals['RTSFlag'])) {
                $this->RTSFlag = $vals['RTSFlag'];
            }
            if (isset($vals['supplyChainID'])) {
                $this->supplyChainID = $vals['supplyChainID'];
            }
            if (isset($vals['UPUCountryID'])) {
                $this->UPUCountryID = $vals['UPUCountryID'];
            }
            if (isset($vals['versionID'])) {
                $this->versionID = $vals['versionID'];
            }
            if (isset($vals['format'])) {
                $this->format = $vals['format'];
            }
            if (isset($vals['destinationPostCodePlusDPS'])) {
                $this->destinationPostCodePlusDPS = $vals['destinationPostCodePlusDPS'];
            }
            if (isset($vals['countryCode'])) {
                $this->countryCode = $vals['countryCode'];
            }
            if (isset($vals['serviceCategory'])) {
                $this->serviceCategory = $vals['serviceCategory'];
            }
            if (isset($vals['maxiCodeEncodeMode'])) {
                $this->maxiCodeEncodeMode = $vals['maxiCodeEncodeMode'];
            }
            if (isset($vals['ECIEncoding'])) {
                $this->ECIEncoding = $vals['ECIEncoding'];
            }
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
            if (isset($vals['mode'])) {
                $this->mode = $vals['mode'];
            }
            if (isset($vals['bill'])) {
                $this->bill = $vals['bill'];
            }
            if (isset($vals['records'])) {
                $this->records = $vals['records'];
            }
            if (isset($vals['secondMessage'])) {
                $this->secondMessage = $vals['secondMessage'];
            }
            if (isset($vals['postalCode'])) {
                $this->postalCode = $vals['postalCode'];
            }
            if (isset($vals['isNull'])) {
                $this->isNull = $vals['isNull'];
            }
            if (isset($vals['complexCodetextType'])) {
                $this->complexCodetextType = $vals['complexCodetextType'];
            }
        }
    }

    public function getName()
    {
        return 'IComplexCodetextDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->primaryData = new \Aspose\Barcode\Bridge\PrimaryDataDTO();
                        $xfer += $this->primaryData->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->secondaryAndAdditionalData = new \Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO();
                        $xfer += $this->secondaryAndAdditionalData->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->barcodeType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->linkCharacter);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->dataLocation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->class_);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->customerContent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->customerContentEncodeMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->dataMatrixType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->itemID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->destinationPostCodeAndDPS);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->informationTypeID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->returnToSenderPostCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->RTSFlag);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->supplyChainID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->UPUCountryID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->versionID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->format);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->destinationPostCodePlusDPS);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->countryCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->serviceCategory);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->maxiCodeEncodeMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ECIEncoding);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->message);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->mode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::STRUCT) {
                        $this->bill = new \Aspose\Barcode\Bridge\SwissQRBillDTO();
                        $xfer += $this->bill->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::LST) {
                        $this->records = array();
                        $_size56 = 0;
                        $_etype59 = 0;
                        $xfer += $input->readListBegin($_etype59, $_size56);
                        for ($_i60 = 0; $_i60 < $_size56; ++$_i60) {
                            $elem61 = null;
                            $elem61 = new \Aspose\Barcode\Bridge\HIBCPASRecordDTO();
                            $xfer += $elem61->read($input);
                            $this->records []= $elem61;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::STRUCT) {
                        $this->secondMessage = new \Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO();
                        $xfer += $this->secondMessage->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->postalCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isNull);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 32:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->complexCodetextType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('IComplexCodetextDTO');
        if ($this->primaryData !== null) {
            if (!is_object($this->primaryData)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('primaryData', TType::STRUCT, 1);
            $xfer += $this->primaryData->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->secondaryAndAdditionalData !== null) {
            if (!is_object($this->secondaryAndAdditionalData)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('secondaryAndAdditionalData', TType::STRUCT, 2);
            $xfer += $this->secondaryAndAdditionalData->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->barcodeType !== null) {
            $xfer += $output->writeFieldBegin('barcodeType', TType::I32, 3);
            $xfer += $output->writeI32($this->barcodeType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->linkCharacter !== null) {
            $xfer += $output->writeFieldBegin('linkCharacter', TType::STRING, 4);
            $xfer += $output->writeString($this->linkCharacter);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataLocation !== null) {
            $xfer += $output->writeFieldBegin('dataLocation', TType::I32, 5);
            $xfer += $output->writeI32($this->dataLocation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->class_ !== null) {
            $xfer += $output->writeFieldBegin('class_', TType::STRING, 6);
            $xfer += $output->writeString($this->class_);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->customerContent !== null) {
            $xfer += $output->writeFieldBegin('customerContent', TType::STRING, 7);
            $xfer += $output->writeString($this->customerContent);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->customerContentEncodeMode !== null) {
            $xfer += $output->writeFieldBegin('customerContentEncodeMode', TType::I32, 8);
            $xfer += $output->writeI32($this->customerContentEncodeMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataMatrixType !== null) {
            $xfer += $output->writeFieldBegin('dataMatrixType', TType::I32, 9);
            $xfer += $output->writeI32($this->dataMatrixType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->itemID !== null) {
            $xfer += $output->writeFieldBegin('itemID', TType::I32, 10);
            $xfer += $output->writeI32($this->itemID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->destinationPostCodeAndDPS !== null) {
            $xfer += $output->writeFieldBegin('destinationPostCodeAndDPS', TType::STRING, 11);
            $xfer += $output->writeString($this->destinationPostCodeAndDPS);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->informationTypeID !== null) {
            $xfer += $output->writeFieldBegin('informationTypeID', TType::STRING, 12);
            $xfer += $output->writeString($this->informationTypeID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->returnToSenderPostCode !== null) {
            $xfer += $output->writeFieldBegin('returnToSenderPostCode', TType::STRING, 13);
            $xfer += $output->writeString($this->returnToSenderPostCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RTSFlag !== null) {
            $xfer += $output->writeFieldBegin('RTSFlag', TType::STRING, 14);
            $xfer += $output->writeString($this->RTSFlag);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->supplyChainID !== null) {
            $xfer += $output->writeFieldBegin('supplyChainID', TType::I32, 15);
            $xfer += $output->writeI32($this->supplyChainID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UPUCountryID !== null) {
            $xfer += $output->writeFieldBegin('UPUCountryID', TType::STRING, 16);
            $xfer += $output->writeString($this->UPUCountryID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->versionID !== null) {
            $xfer += $output->writeFieldBegin('versionID', TType::I32, 17);
            $xfer += $output->writeI32($this->versionID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->format !== null) {
            $xfer += $output->writeFieldBegin('format', TType::I32, 18);
            $xfer += $output->writeI32($this->format);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->destinationPostCodePlusDPS !== null) {
            $xfer += $output->writeFieldBegin('destinationPostCodePlusDPS', TType::STRING, 20);
            $xfer += $output->writeString($this->destinationPostCodePlusDPS);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->countryCode !== null) {
            $xfer += $output->writeFieldBegin('countryCode', TType::I32, 21);
            $xfer += $output->writeI32($this->countryCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->serviceCategory !== null) {
            $xfer += $output->writeFieldBegin('serviceCategory', TType::I32, 22);
            $xfer += $output->writeI32($this->serviceCategory);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxiCodeEncodeMode !== null) {
            $xfer += $output->writeFieldBegin('maxiCodeEncodeMode', TType::I32, 23);
            $xfer += $output->writeI32($this->maxiCodeEncodeMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ECIEncoding !== null) {
            $xfer += $output->writeFieldBegin('ECIEncoding', TType::I32, 24);
            $xfer += $output->writeI32($this->ECIEncoding);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->message !== null) {
            $xfer += $output->writeFieldBegin('message', TType::STRING, 25);
            $xfer += $output->writeString($this->message);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mode !== null) {
            $xfer += $output->writeFieldBegin('mode', TType::I32, 26);
            $xfer += $output->writeI32($this->mode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bill !== null) {
            if (!is_object($this->bill)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('bill', TType::STRUCT, 27);
            $xfer += $this->bill->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->records !== null) {
            if (!is_array($this->records)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('records', TType::LST, 28);
            $output->writeListBegin(TType::STRUCT, count($this->records));
            foreach ($this->records as $iter62) {
                $xfer += $iter62->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->secondMessage !== null) {
            if (!is_object($this->secondMessage)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('secondMessage', TType::STRUCT, 29);
            $xfer += $this->secondMessage->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->postalCode !== null) {
            $xfer += $output->writeFieldBegin('postalCode', TType::STRING, 30);
            $xfer += $output->writeString($this->postalCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isNull !== null) {
            $xfer += $output->writeFieldBegin('isNull', TType::BOOL, 31);
            $xfer += $output->writeBool($this->isNull);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->complexCodetextType !== null) {
            $xfer += $output->writeFieldBegin('complexCodetextType', TType::I32, 32);
            $xfer += $output->writeI32($this->complexCodetextType);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

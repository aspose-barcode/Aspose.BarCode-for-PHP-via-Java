<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MaxiCodeSecondMessageDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'message',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'year',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'identifiers',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'maxiCodeSecondMessageType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $message = null;
    /**
     * @var int
     */
    public $year = null;
    /**
     * @var string[]
     */
    public $identifiers = null;
    /**
     * @var int
     */
    public $maxiCodeSecondMessageType = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
            if (isset($vals['year'])) {
                $this->year = $vals['year'];
            }
            if (isset($vals['identifiers'])) {
                $this->identifiers = $vals['identifiers'];
            }
            if (isset($vals['maxiCodeSecondMessageType'])) {
                $this->maxiCodeSecondMessageType = $vals['maxiCodeSecondMessageType'];
            }
        }
    }

    public function getName()
    {
        return 'MaxiCodeSecondMessageDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->message);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->year);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->identifiers = array();
                        $_size63 = 0;
                        $_etype66 = 0;
                        $xfer += $input->readListBegin($_etype66, $_size63);
                        for ($_i67 = 0; $_i67 < $_size63; ++$_i67) {
                            $elem68 = null;
                            $xfer += $input->readString($elem68);
                            $this->identifiers []= $elem68;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->maxiCodeSecondMessageType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MaxiCodeSecondMessageDTO');
        if ($this->message !== null) {
            $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
            $xfer += $output->writeString($this->message);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->year !== null) {
            $xfer += $output->writeFieldBegin('year', TType::I32, 2);
            $xfer += $output->writeI32($this->year);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->identifiers !== null) {
            if (!is_array($this->identifiers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('identifiers', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->identifiers));
            foreach ($this->identifiers as $iter69) {
                $xfer += $output->writeString($iter69);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxiCodeSecondMessageType !== null) {
            $xfer += $output->writeFieldBegin('maxiCodeSecondMessageType', TType::I32, 4);
            $xfer += $output->writeI32($this->maxiCodeSecondMessageType);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

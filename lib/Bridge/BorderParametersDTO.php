<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BorderParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'visible',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'width',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\UnitDTO',
        ),
        3 => array(
            'var' => 'dashStyle',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'color',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var bool
     */
    public $visible = null;
    /**
     * @var \Aspose\Barcode\Bridge\UnitDTO
     */
    public $width = null;
    /**
     * @var int
     */
    public $dashStyle = null;
    /**
     * @var int
     */
    public $color = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['visible'])) {
                $this->visible = $vals['visible'];
            }
            if (isset($vals['width'])) {
                $this->width = $vals['width'];
            }
            if (isset($vals['dashStyle'])) {
                $this->dashStyle = $vals['dashStyle'];
            }
            if (isset($vals['color'])) {
                $this->color = $vals['color'];
            }
        }
    }

    public function getName()
    {
        return 'BorderParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->visible);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->width = new \Aspose\Barcode\Bridge\UnitDTO();
                        $xfer += $this->width->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->dashStyle);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->color);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BorderParametersDTO');
        if ($this->visible !== null) {
            $xfer += $output->writeFieldBegin('visible', TType::BOOL, 1);
            $xfer += $output->writeBool($this->visible);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->width !== null) {
            if (!is_object($this->width)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('width', TType::STRUCT, 2);
            $xfer += $this->width->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dashStyle !== null) {
            $xfer += $output->writeFieldBegin('dashStyle', TType::I32, 3);
            $xfer += $output->writeI32($this->dashStyle);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->color !== null) {
            $xfer += $output->writeFieldBegin('color', TType::I32, 4);
            $xfer += $output->writeI32($this->color);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

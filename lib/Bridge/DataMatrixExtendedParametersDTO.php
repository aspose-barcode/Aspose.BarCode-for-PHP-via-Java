<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class DataMatrixExtendedParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'structuredAppendBarcodesCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'structuredAppendBarcodeId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'structuredAppendFileId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'readerProgramming',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'empty',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'toString',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $structuredAppendBarcodesCount = null;
    /**
     * @var int
     */
    public $structuredAppendBarcodeId = null;
    /**
     * @var int
     */
    public $structuredAppendFileId = null;
    /**
     * @var bool
     */
    public $readerProgramming = null;
    /**
     * @var bool
     */
    public $empty = null;
    /**
     * @var string
     */
    public $toString = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['structuredAppendBarcodesCount'])) {
                $this->structuredAppendBarcodesCount = $vals['structuredAppendBarcodesCount'];
            }
            if (isset($vals['structuredAppendBarcodeId'])) {
                $this->structuredAppendBarcodeId = $vals['structuredAppendBarcodeId'];
            }
            if (isset($vals['structuredAppendFileId'])) {
                $this->structuredAppendFileId = $vals['structuredAppendFileId'];
            }
            if (isset($vals['readerProgramming'])) {
                $this->readerProgramming = $vals['readerProgramming'];
            }
            if (isset($vals['empty'])) {
                $this->empty = $vals['empty'];
            }
            if (isset($vals['toString'])) {
                $this->toString = $vals['toString'];
            }
        }
    }

    public function getName()
    {
        return 'DataMatrixExtendedParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->structuredAppendBarcodesCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->structuredAppendBarcodeId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->structuredAppendFileId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->readerProgramming);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->empty);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toString);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('DataMatrixExtendedParametersDTO');
        if ($this->structuredAppendBarcodesCount !== null) {
            $xfer += $output->writeFieldBegin('structuredAppendBarcodesCount', TType::I32, 1);
            $xfer += $output->writeI32($this->structuredAppendBarcodesCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->structuredAppendBarcodeId !== null) {
            $xfer += $output->writeFieldBegin('structuredAppendBarcodeId', TType::I32, 2);
            $xfer += $output->writeI32($this->structuredAppendBarcodeId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->structuredAppendFileId !== null) {
            $xfer += $output->writeFieldBegin('structuredAppendFileId', TType::I32, 3);
            $xfer += $output->writeI32($this->structuredAppendFileId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->readerProgramming !== null) {
            $xfer += $output->writeFieldBegin('readerProgramming', TType::BOOL, 4);
            $xfer += $output->writeBool($this->readerProgramming);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->empty !== null) {
            $xfer += $output->writeFieldBegin('empty', TType::BOOL, 5);
            $xfer += $output->writeBool($this->empty);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toString !== null) {
            $xfer += $output->writeFieldBegin('toString', TType::STRING, 6);
            $xfer += $output->writeString($this->toString);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

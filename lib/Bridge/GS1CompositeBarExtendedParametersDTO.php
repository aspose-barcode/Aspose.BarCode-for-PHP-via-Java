<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GS1CompositeBarExtendedParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'oneDType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'oneDCodeText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'twoDType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'twoDCodeText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'toString',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $oneDType = null;
    /**
     * @var string
     */
    public $oneDCodeText = null;
    /**
     * @var int
     */
    public $twoDType = null;
    /**
     * @var string
     */
    public $twoDCodeText = null;
    /**
     * @var string
     */
    public $toString = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['oneDType'])) {
                $this->oneDType = $vals['oneDType'];
            }
            if (isset($vals['oneDCodeText'])) {
                $this->oneDCodeText = $vals['oneDCodeText'];
            }
            if (isset($vals['twoDType'])) {
                $this->twoDType = $vals['twoDType'];
            }
            if (isset($vals['twoDCodeText'])) {
                $this->twoDCodeText = $vals['twoDCodeText'];
            }
            if (isset($vals['toString'])) {
                $this->toString = $vals['toString'];
            }
        }
    }

    public function getName()
    {
        return 'GS1CompositeBarExtendedParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->oneDType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->oneDCodeText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->twoDType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->twoDCodeText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toString);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GS1CompositeBarExtendedParametersDTO');
        if ($this->oneDType !== null) {
            $xfer += $output->writeFieldBegin('oneDType', TType::I32, 1);
            $xfer += $output->writeI32($this->oneDType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->oneDCodeText !== null) {
            $xfer += $output->writeFieldBegin('oneDCodeText', TType::STRING, 2);
            $xfer += $output->writeString($this->oneDCodeText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->twoDType !== null) {
            $xfer += $output->writeFieldBegin('twoDType', TType::I32, 3);
            $xfer += $output->writeI32($this->twoDType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->twoDCodeText !== null) {
            $xfer += $output->writeFieldBegin('twoDCodeText', TType::STRING, 4);
            $xfer += $output->writeString($this->twoDCodeText);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toString !== null) {
            $xfer += $output->writeFieldBegin('toString', TType::STRING, 5);
            $xfer += $output->writeString($this->toString);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

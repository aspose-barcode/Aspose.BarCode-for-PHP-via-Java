<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class AztecParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'aztecEncodeMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'ECIEncoding',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'structuredAppendBarcodeId',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'structuredAppendBarcodesCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'structuredAppendFileId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'aztecErrorLevel',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'aztecSymbolMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'layersCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'isReaderInitialization',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'aspectRatio',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
    );

    /**
     * @var int
     */
    public $aztecEncodeMode = null;
    /**
     * @var int
     */
    public $ECIEncoding = null;
    /**
     * @var int
     */
    public $structuredAppendBarcodeId = null;
    /**
     * @var int
     */
    public $structuredAppendBarcodesCount = null;
    /**
     * @var string
     */
    public $structuredAppendFileId = null;
    /**
     * @var int
     */
    public $aztecErrorLevel = null;
    /**
     * @var int
     */
    public $aztecSymbolMode = null;
    /**
     * @var int
     */
    public $layersCount = null;
    /**
     * @var bool
     */
    public $isReaderInitialization = null;
    /**
     * @var double
     */
    public $aspectRatio = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['aztecEncodeMode'])) {
                $this->aztecEncodeMode = $vals['aztecEncodeMode'];
            }
            if (isset($vals['ECIEncoding'])) {
                $this->ECIEncoding = $vals['ECIEncoding'];
            }
            if (isset($vals['structuredAppendBarcodeId'])) {
                $this->structuredAppendBarcodeId = $vals['structuredAppendBarcodeId'];
            }
            if (isset($vals['structuredAppendBarcodesCount'])) {
                $this->structuredAppendBarcodesCount = $vals['structuredAppendBarcodesCount'];
            }
            if (isset($vals['structuredAppendFileId'])) {
                $this->structuredAppendFileId = $vals['structuredAppendFileId'];
            }
            if (isset($vals['aztecErrorLevel'])) {
                $this->aztecErrorLevel = $vals['aztecErrorLevel'];
            }
            if (isset($vals['aztecSymbolMode'])) {
                $this->aztecSymbolMode = $vals['aztecSymbolMode'];
            }
            if (isset($vals['layersCount'])) {
                $this->layersCount = $vals['layersCount'];
            }
            if (isset($vals['isReaderInitialization'])) {
                $this->isReaderInitialization = $vals['isReaderInitialization'];
            }
            if (isset($vals['aspectRatio'])) {
                $this->aspectRatio = $vals['aspectRatio'];
            }
        }
    }

    public function getName()
    {
        return 'AztecParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->aztecEncodeMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ECIEncoding);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->structuredAppendBarcodeId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->structuredAppendBarcodesCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->structuredAppendFileId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->aztecErrorLevel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->aztecSymbolMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->layersCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isReaderInitialization);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->aspectRatio);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('AztecParametersDTO');
        if ($this->aztecEncodeMode !== null) {
            $xfer += $output->writeFieldBegin('aztecEncodeMode', TType::I32, 1);
            $xfer += $output->writeI32($this->aztecEncodeMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ECIEncoding !== null) {
            $xfer += $output->writeFieldBegin('ECIEncoding', TType::I32, 2);
            $xfer += $output->writeI32($this->ECIEncoding);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->structuredAppendBarcodeId !== null) {
            $xfer += $output->writeFieldBegin('structuredAppendBarcodeId', TType::I32, 3);
            $xfer += $output->writeI32($this->structuredAppendBarcodeId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->structuredAppendBarcodesCount !== null) {
            $xfer += $output->writeFieldBegin('structuredAppendBarcodesCount', TType::I32, 4);
            $xfer += $output->writeI32($this->structuredAppendBarcodesCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->structuredAppendFileId !== null) {
            $xfer += $output->writeFieldBegin('structuredAppendFileId', TType::STRING, 5);
            $xfer += $output->writeString($this->structuredAppendFileId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->aztecErrorLevel !== null) {
            $xfer += $output->writeFieldBegin('aztecErrorLevel', TType::I32, 6);
            $xfer += $output->writeI32($this->aztecErrorLevel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->aztecSymbolMode !== null) {
            $xfer += $output->writeFieldBegin('aztecSymbolMode', TType::I32, 7);
            $xfer += $output->writeI32($this->aztecSymbolMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->layersCount !== null) {
            $xfer += $output->writeFieldBegin('layersCount', TType::I32, 8);
            $xfer += $output->writeI32($this->layersCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isReaderInitialization !== null) {
            $xfer += $output->writeFieldBegin('isReaderInitialization', TType::BOOL, 9);
            $xfer += $output->writeBool($this->isReaderInitialization);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->aspectRatio !== null) {
            $xfer += $output->writeFieldBegin('aspectRatio', TType::DOUBLE, 10);
            $xfer += $output->writeDouble($this->aspectRatio);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

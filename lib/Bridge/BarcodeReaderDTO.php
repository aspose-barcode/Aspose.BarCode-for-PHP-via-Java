<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BarcodeReaderDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'base64Image',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'areas',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        3 => array(
            'var' => 'barCodeDecodeTypes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        4 => array(
            'var' => 'timeout',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'barcodeSettings',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\BarcodeSettingsDTO',
        ),
        6 => array(
            'var' => 'qualitySettings',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\QualitySettingsDTO',
        ),
        7 => array(
            'var' => 'foundBarCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Aspose\Barcode\Bridge\BarCodeResultDTO',
                ),
        ),
    );

    /**
     * @var string
     */
    public $base64Image = null;
    /**
     * @var string[]
     */
    public $areas = null;
    /**
     * @var int[]
     */
    public $barCodeDecodeTypes = null;
    /**
     * @var int
     */
    public $timeout = null;
    /**
     * @var \Aspose\Barcode\Bridge\BarcodeSettingsDTO
     */
    public $barcodeSettings = null;
    /**
     * @var \Aspose\Barcode\Bridge\QualitySettingsDTO
     */
    public $qualitySettings = null;
    /**
     * @var \Aspose\Barcode\Bridge\BarCodeResultDTO[]
     */
    public $foundBarCodes = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['base64Image'])) {
                $this->base64Image = $vals['base64Image'];
            }
            if (isset($vals['areas'])) {
                $this->areas = $vals['areas'];
            }
            if (isset($vals['barCodeDecodeTypes'])) {
                $this->barCodeDecodeTypes = $vals['barCodeDecodeTypes'];
            }
            if (isset($vals['timeout'])) {
                $this->timeout = $vals['timeout'];
            }
            if (isset($vals['barcodeSettings'])) {
                $this->barcodeSettings = $vals['barcodeSettings'];
            }
            if (isset($vals['qualitySettings'])) {
                $this->qualitySettings = $vals['qualitySettings'];
            }
            if (isset($vals['foundBarCodes'])) {
                $this->foundBarCodes = $vals['foundBarCodes'];
            }
        }
    }

    public function getName()
    {
        return 'BarcodeReaderDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->base64Image);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->areas = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $xfer += $input->readString($elem5);
                            $this->areas []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->barCodeDecodeTypes = array();
                        $_size6 = 0;
                        $_etype9 = 0;
                        $xfer += $input->readListBegin($_etype9, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                            $elem11 = null;
                            $xfer += $input->readI32($elem11);
                            $this->barCodeDecodeTypes []= $elem11;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->timeout);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->barcodeSettings = new \Aspose\Barcode\Bridge\BarcodeSettingsDTO();
                        $xfer += $this->barcodeSettings->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->qualitySettings = new \Aspose\Barcode\Bridge\QualitySettingsDTO();
                        $xfer += $this->qualitySettings->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->foundBarCodes = array();
                        $_size12 = 0;
                        $_etype15 = 0;
                        $xfer += $input->readListBegin($_etype15, $_size12);
                        for ($_i16 = 0; $_i16 < $_size12; ++$_i16) {
                            $elem17 = null;
                            $elem17 = new \Aspose\Barcode\Bridge\BarCodeResultDTO();
                            $xfer += $elem17->read($input);
                            $this->foundBarCodes []= $elem17;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BarcodeReaderDTO');
        if ($this->base64Image !== null) {
            $xfer += $output->writeFieldBegin('base64Image', TType::STRING, 1);
            $xfer += $output->writeString($this->base64Image);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->areas !== null) {
            if (!is_array($this->areas)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('areas', TType::LST, 2);
            $output->writeListBegin(TType::STRING, count($this->areas));
            foreach ($this->areas as $iter18) {
                $xfer += $output->writeString($iter18);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->barCodeDecodeTypes !== null) {
            if (!is_array($this->barCodeDecodeTypes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('barCodeDecodeTypes', TType::LST, 3);
            $output->writeListBegin(TType::I32, count($this->barCodeDecodeTypes));
            foreach ($this->barCodeDecodeTypes as $iter19) {
                $xfer += $output->writeI32($iter19);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeout !== null) {
            $xfer += $output->writeFieldBegin('timeout', TType::I32, 4);
            $xfer += $output->writeI32($this->timeout);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->barcodeSettings !== null) {
            if (!is_object($this->barcodeSettings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('barcodeSettings', TType::STRUCT, 5);
            $xfer += $this->barcodeSettings->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->qualitySettings !== null) {
            if (!is_object($this->qualitySettings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('qualitySettings', TType::STRUCT, 6);
            $xfer += $this->qualitySettings->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->foundBarCodes !== null) {
            if (!is_array($this->foundBarCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('foundBarCodes', TType::LST, 7);
            $output->writeListBegin(TType::STRUCT, count($this->foundBarCodes));
            foreach ($this->foundBarCodes as $iter20) {
                $xfer += $iter20->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ThriftAsposeBarcodeServiceClient implements \Aspose\Barcode\Bridge\ThriftAsposeBarcodeServiceIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }


    public function BarcodeReader_ctor()
    {
        $this->send_BarcodeReader_ctor();
        return $this->recv_BarcodeReader_ctor();
    }

    public function send_BarcodeReader_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarcodeReader_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarcodeReader_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarcodeReader_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarcodeReader_ctor failed: unknown result");
    }

    public function BarcodeReader_readBarCodes(\Aspose\Barcode\Bridge\BarcodeReaderDTO $thriftBarcodeReader, $base64LicenseContent)
    {
        $this->send_BarcodeReader_readBarCodes($thriftBarcodeReader, $base64LicenseContent);
        return $this->recv_BarcodeReader_readBarCodes();
    }

    public function send_BarcodeReader_readBarCodes(\Aspose\Barcode\Bridge\BarcodeReaderDTO $thriftBarcodeReader, $base64LicenseContent)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_readBarCodes_args();
        $args->thriftBarcodeReader = $thriftBarcodeReader;
        $args->base64LicenseContent = $base64LicenseContent;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarcodeReader_readBarCodes',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarcodeReader_readBarCodes', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarcodeReader_readBarCodes()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_readBarCodes_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_readBarCodes_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("BarcodeReader_readBarCodes failed: unknown result");
    }

    public function BarcodeReader_exportToXml(\Aspose\Barcode\Bridge\BarcodeReaderDTO $thriftBarcodeReader)
    {
        $this->send_BarcodeReader_exportToXml($thriftBarcodeReader);
        return $this->recv_BarcodeReader_exportToXml();
    }

    public function send_BarcodeReader_exportToXml(\Aspose\Barcode\Bridge\BarcodeReaderDTO $thriftBarcodeReader)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_exportToXml_args();
        $args->thriftBarcodeReader = $thriftBarcodeReader;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarcodeReader_exportToXml',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarcodeReader_exportToXml', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarcodeReader_exportToXml()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_exportToXml_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_exportToXml_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarcodeReader_exportToXml failed: unknown result");
    }

    public function BarcodeReader_importFromXml($source)
    {
        $this->send_BarcodeReader_importFromXml($source);
        return $this->recv_BarcodeReader_importFromXml();
    }

    public function send_BarcodeReader_importFromXml($source)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_importFromXml_args();
        $args->source = $source;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarcodeReader_importFromXml',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarcodeReader_importFromXml', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarcodeReader_importFromXml()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_importFromXml_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeReader_importFromXml_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarcodeReader_importFromXml failed: unknown result");
    }

    public function BarcodeResult_getCodeTextWithEncoding($bytesArray, $encoding)
    {
        $this->send_BarcodeResult_getCodeTextWithEncoding($bytesArray, $encoding);
        return $this->recv_BarcodeResult_getCodeTextWithEncoding();
    }

    public function send_BarcodeResult_getCodeTextWithEncoding($bytesArray, $encoding)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeResult_getCodeTextWithEncoding_args();
        $args->bytesArray = $bytesArray;
        $args->encoding = $encoding;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarcodeResult_getCodeTextWithEncoding',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarcodeResult_getCodeTextWithEncoding', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarcodeResult_getCodeTextWithEncoding()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeResult_getCodeTextWithEncoding_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeResult_getCodeTextWithEncoding_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarcodeResult_getCodeTextWithEncoding failed: unknown result");
    }

    public function QualitySettings_getHighPerformance()
    {
        $this->send_QualitySettings_getHighPerformance();
        return $this->recv_QualitySettings_getHighPerformance();
    }

    public function send_QualitySettings_getHighPerformance()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getHighPerformance_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QualitySettings_getHighPerformance',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QualitySettings_getHighPerformance', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QualitySettings_getHighPerformance()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getHighPerformance_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getHighPerformance_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QualitySettings_getHighPerformance failed: unknown result");
    }

    public function QualitySettings_getNormalQuality()
    {
        $this->send_QualitySettings_getNormalQuality();
        return $this->recv_QualitySettings_getNormalQuality();
    }

    public function send_QualitySettings_getNormalQuality()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getNormalQuality_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QualitySettings_getNormalQuality',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QualitySettings_getNormalQuality', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QualitySettings_getNormalQuality()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getNormalQuality_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getNormalQuality_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QualitySettings_getNormalQuality failed: unknown result");
    }

    public function QualitySettings_getHighQuality()
    {
        $this->send_QualitySettings_getHighQuality();
        return $this->recv_QualitySettings_getHighQuality();
    }

    public function send_QualitySettings_getHighQuality()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getHighQuality_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QualitySettings_getHighQuality',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QualitySettings_getHighQuality', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QualitySettings_getHighQuality()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getHighQuality_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getHighQuality_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QualitySettings_getHighQuality failed: unknown result");
    }

    public function QualitySettings_getMaxQuality()
    {
        $this->send_QualitySettings_getMaxQuality();
        return $this->recv_QualitySettings_getMaxQuality();
    }

    public function send_QualitySettings_getMaxQuality()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getMaxQuality_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QualitySettings_getMaxQuality',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QualitySettings_getMaxQuality', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QualitySettings_getMaxQuality()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getMaxQuality_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QualitySettings_getMaxQuality_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QualitySettings_getMaxQuality failed: unknown result");
    }

    public function Quadrangle_containsPoint(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle, \Aspose\Barcode\Bridge\PointDTO $point)
    {
        $this->send_Quadrangle_containsPoint($thisQuadrangle, $point);
        return $this->recv_Quadrangle_containsPoint();
    }

    public function send_Quadrangle_containsPoint(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle, \Aspose\Barcode\Bridge\PointDTO $point)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsPoint_args();
        $args->thisQuadrangle = $thisQuadrangle;
        $args->point = $point;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Quadrangle_containsPoint',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Quadrangle_containsPoint', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Quadrangle_containsPoint()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsPoint_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsPoint_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Quadrangle_containsPoint failed: unknown result");
    }

    public function Quadrangle_containsCoordinates(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle, $x, $y)
    {
        $this->send_Quadrangle_containsCoordinates($thisQuadrangle, $x, $y);
        return $this->recv_Quadrangle_containsCoordinates();
    }

    public function send_Quadrangle_containsCoordinates(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle, $x, $y)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsCoordinates_args();
        $args->thisQuadrangle = $thisQuadrangle;
        $args->x = $x;
        $args->y = $y;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Quadrangle_containsCoordinates',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Quadrangle_containsCoordinates', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Quadrangle_containsCoordinates()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsCoordinates_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsCoordinates_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Quadrangle_containsCoordinates failed: unknown result");
    }

    public function Quadrangle_containsQuadrangle(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle, \Aspose\Barcode\Bridge\QuadrangleDTO $anotherQuadrangle)
    {
        $this->send_Quadrangle_containsQuadrangle($thisQuadrangle, $anotherQuadrangle);
        return $this->recv_Quadrangle_containsQuadrangle();
    }

    public function send_Quadrangle_containsQuadrangle(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle, \Aspose\Barcode\Bridge\QuadrangleDTO $anotherQuadrangle)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsQuadrangle_args();
        $args->thisQuadrangle = $thisQuadrangle;
        $args->anotherQuadrangle = $anotherQuadrangle;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Quadrangle_containsQuadrangle',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Quadrangle_containsQuadrangle', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Quadrangle_containsQuadrangle()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsQuadrangle_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsQuadrangle_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Quadrangle_containsQuadrangle failed: unknown result");
    }

    public function Quadrangle_containsRectangle(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle, \Aspose\Barcode\Bridge\RectangleDTO $rectangle)
    {
        $this->send_Quadrangle_containsRectangle($thisQuadrangle, $rectangle);
        return $this->recv_Quadrangle_containsRectangle();
    }

    public function send_Quadrangle_containsRectangle(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle, \Aspose\Barcode\Bridge\RectangleDTO $rectangle)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsRectangle_args();
        $args->thisQuadrangle = $thisQuadrangle;
        $args->rectangle = $rectangle;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Quadrangle_containsRectangle',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Quadrangle_containsRectangle', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Quadrangle_containsRectangle()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsRectangle_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_containsRectangle_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Quadrangle_containsRectangle failed: unknown result");
    }

    public function Quadrangle_getBoundingRectangle(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle)
    {
        $this->send_Quadrangle_getBoundingRectangle($thisQuadrangle);
        return $this->recv_Quadrangle_getBoundingRectangle();
    }

    public function send_Quadrangle_getBoundingRectangle(\Aspose\Barcode\Bridge\QuadrangleDTO $thisQuadrangle)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_getBoundingRectangle_args();
        $args->thisQuadrangle = $thisQuadrangle;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Quadrangle_getBoundingRectangle',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Quadrangle_getBoundingRectangle', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Quadrangle_getBoundingRectangle()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_getBoundingRectangle_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_getBoundingRectangle_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Quadrangle_getBoundingRectangle failed: unknown result");
    }

    public function Quadrangle_toString(\Aspose\Barcode\Bridge\QuadrangleDTO $quadrangleDTO)
    {
        $this->send_Quadrangle_toString($quadrangleDTO);
        return $this->recv_Quadrangle_toString();
    }

    public function send_Quadrangle_toString(\Aspose\Barcode\Bridge\QuadrangleDTO $quadrangleDTO)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_toString_args();
        $args->quadrangleDTO = $quadrangleDTO;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Quadrangle_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Quadrangle_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Quadrangle_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Quadrangle_toString failed: unknown result");
    }

    public function Code128DataPortion_toString(\Aspose\Barcode\Bridge\Code128DataPortionDTO $code128DataPortionDTO)
    {
        $this->send_Code128DataPortion_toString($code128DataPortionDTO);
        return $this->recv_Code128DataPortion_toString();
    }

    public function send_Code128DataPortion_toString(\Aspose\Barcode\Bridge\Code128DataPortionDTO $code128DataPortionDTO)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code128DataPortion_toString_args();
        $args->code128DataPortionDTO = $code128DataPortionDTO;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Code128DataPortion_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Code128DataPortion_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Code128DataPortion_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code128DataPortion_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code128DataPortion_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Code128DataPortion_toString failed: unknown result");
    }

    public function BarcodeGenerator_ctor($encodeType)
    {
        $this->send_BarcodeGenerator_ctor($encodeType);
        return $this->recv_BarcodeGenerator_ctor();
    }

    public function send_BarcodeGenerator_ctor($encodeType)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_ctor_args();
        $args->encodeType = $encodeType;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarcodeGenerator_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarcodeGenerator_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarcodeGenerator_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarcodeGenerator_ctor failed: unknown result");
    }

    public function BarcodeGenerator_generateBarCodeImage(\Aspose\Barcode\Bridge\BarcodeGeneratorDTO $barcodeGeneratorDTO, $imageFormat, $base64LicenseContent)
    {
        $this->send_BarcodeGenerator_generateBarCodeImage($barcodeGeneratorDTO, $imageFormat, $base64LicenseContent);
        return $this->recv_BarcodeGenerator_generateBarCodeImage();
    }

    public function send_BarcodeGenerator_generateBarCodeImage(\Aspose\Barcode\Bridge\BarcodeGeneratorDTO $barcodeGeneratorDTO, $imageFormat, $base64LicenseContent)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_generateBarCodeImage_args();
        $args->barcodeGeneratorDTO = $barcodeGeneratorDTO;
        $args->imageFormat = $imageFormat;
        $args->base64LicenseContent = $base64LicenseContent;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarcodeGenerator_generateBarCodeImage',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarcodeGenerator_generateBarCodeImage', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarcodeGenerator_generateBarCodeImage()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_generateBarCodeImage_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_generateBarCodeImage_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarcodeGenerator_generateBarCodeImage failed: unknown result");
    }

    public function BarcodeGenerator_importFromXml($source)
    {
        $this->send_BarcodeGenerator_importFromXml($source);
        return $this->recv_BarcodeGenerator_importFromXml();
    }

    public function send_BarcodeGenerator_importFromXml($source)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_importFromXml_args();
        $args->source = $source;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarcodeGenerator_importFromXml',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarcodeGenerator_importFromXml', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarcodeGenerator_importFromXml()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_importFromXml_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_importFromXml_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarcodeGenerator_importFromXml failed: unknown result");
    }

    public function BarcodeGenerator_exportToXml(\Aspose\Barcode\Bridge\BarcodeGeneratorDTO $barcodeGeneratorDTO)
    {
        $this->send_BarcodeGenerator_exportToXml($barcodeGeneratorDTO);
        return $this->recv_BarcodeGenerator_exportToXml();
    }

    public function send_BarcodeGenerator_exportToXml(\Aspose\Barcode\Bridge\BarcodeGeneratorDTO $barcodeGeneratorDTO)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_exportToXml_args();
        $args->barcodeGeneratorDTO = $barcodeGeneratorDTO;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarcodeGenerator_exportToXml',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarcodeGenerator_exportToXml', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarcodeGenerator_exportToXml()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_exportToXml_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarcodeGenerator_exportToXml_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarcodeGenerator_exportToXml failed: unknown result");
    }

    public function BaseGenerationParameters_updateResolution(\Aspose\Barcode\Bridge\BaseGenerationParametersDTO $baseGenerationParameters, $resolution)
    {
        $this->send_BaseGenerationParameters_updateResolution($baseGenerationParameters, $resolution);
        return $this->recv_BaseGenerationParameters_updateResolution();
    }

    public function send_BaseGenerationParameters_updateResolution(\Aspose\Barcode\Bridge\BaseGenerationParametersDTO $baseGenerationParameters, $resolution)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BaseGenerationParameters_updateResolution_args();
        $args->baseGenerationParameters = $baseGenerationParameters;
        $args->resolution = $resolution;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BaseGenerationParameters_updateResolution',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BaseGenerationParameters_updateResolution', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BaseGenerationParameters_updateResolution()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BaseGenerationParameters_updateResolution_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BaseGenerationParameters_updateResolution_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BaseGenerationParameters_updateResolution failed: unknown result");
    }

    public function HanXinExtCodetextBuilder_getExtendedCodetext(array $extCodeItems)
    {
        $this->send_HanXinExtCodetextBuilder_getExtendedCodetext($extCodeItems);
        return $this->recv_HanXinExtCodetextBuilder_getExtendedCodetext();
    }

    public function send_HanXinExtCodetextBuilder_getExtendedCodetext(array $extCodeItems)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HanXinExtCodetextBuilder_getExtendedCodetext_args();
        $args->extCodeItems = $extCodeItems;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HanXinExtCodetextBuilder_getExtendedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HanXinExtCodetextBuilder_getExtendedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HanXinExtCodetextBuilder_getExtendedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HanXinExtCodetextBuilder_getExtendedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HanXinExtCodetextBuilder_getExtendedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HanXinExtCodetextBuilder_getExtendedCodetext failed: unknown result");
    }

    public function CodetextParameters_toString(\Aspose\Barcode\Bridge\CodetextParametersDTO $CodetextParametersDto)
    {
        $this->send_CodetextParameters_toString($CodetextParametersDto);
        return $this->recv_CodetextParameters_toString();
    }

    public function send_CodetextParameters_toString(\Aspose\Barcode\Bridge\CodetextParametersDTO $CodetextParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodetextParameters_toString_args();
        $args->CodetextParametersDto = $CodetextParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CodetextParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CodetextParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CodetextParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodetextParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodetextParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("CodetextParameters_toString failed: unknown result");
    }

    public function PostalParameters_toString(\Aspose\Barcode\Bridge\PostalParametersDTO $PostalParametersDto)
    {
        $this->send_PostalParameters_toString($PostalParametersDto);
        return $this->recv_PostalParameters_toString();
    }

    public function send_PostalParameters_toString(\Aspose\Barcode\Bridge\PostalParametersDTO $PostalParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PostalParameters_toString_args();
        $args->PostalParametersDto = $PostalParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'PostalParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('PostalParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_PostalParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PostalParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PostalParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("PostalParameters_toString failed: unknown result");
    }

    public function AustralianPostParameters_toString(\Aspose\Barcode\Bridge\AustralianPostParametersDTO $AustralianPostParametersDto)
    {
        $this->send_AustralianPostParameters_toString($AustralianPostParametersDto);
        return $this->recv_AustralianPostParameters_toString();
    }

    public function send_AustralianPostParameters_toString(\Aspose\Barcode\Bridge\AustralianPostParametersDTO $AustralianPostParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AustralianPostParameters_toString_args();
        $args->AustralianPostParametersDto = $AustralianPostParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'AustralianPostParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('AustralianPostParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_AustralianPostParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AustralianPostParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AustralianPostParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("AustralianPostParameters_toString failed: unknown result");
    }

    public function CodablockParameters_toString(\Aspose\Barcode\Bridge\CodablockParametersDTO $CodablockParametersDto)
    {
        $this->send_CodablockParameters_toString($CodablockParametersDto);
        return $this->recv_CodablockParameters_toString();
    }

    public function send_CodablockParameters_toString(\Aspose\Barcode\Bridge\CodablockParametersDTO $CodablockParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodablockParameters_toString_args();
        $args->CodablockParametersDto = $CodablockParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CodablockParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CodablockParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CodablockParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodablockParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodablockParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("CodablockParameters_toString failed: unknown result");
    }

    public function DataBarParameters_toString(\Aspose\Barcode\Bridge\DataBarParametersDTO $DataBarParametersDto)
    {
        $this->send_DataBarParameters_toString($DataBarParametersDto);
        return $this->recv_DataBarParameters_toString();
    }

    public function send_DataBarParameters_toString(\Aspose\Barcode\Bridge\DataBarParametersDTO $DataBarParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataBarParameters_toString_args();
        $args->DataBarParametersDto = $DataBarParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'DataBarParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('DataBarParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_DataBarParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataBarParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataBarParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("DataBarParameters_toString failed: unknown result");
    }

    public function DataMatrixParameters_toString(\Aspose\Barcode\Bridge\DataMatrixParametersDTO $DataMatrixParametersDto)
    {
        $this->send_DataMatrixParameters_toString($DataMatrixParametersDto);
        return $this->recv_DataMatrixParameters_toString();
    }

    public function send_DataMatrixParameters_toString(\Aspose\Barcode\Bridge\DataMatrixParametersDTO $DataMatrixParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataMatrixParameters_toString_args();
        $args->DataMatrixParametersDto = $DataMatrixParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'DataMatrixParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('DataMatrixParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_DataMatrixParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataMatrixParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataMatrixParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("DataMatrixParameters_toString failed: unknown result");
    }

    public function Code16KParameters_toString(\Aspose\Barcode\Bridge\Code16KParametersDTO $Code16KParametersDto)
    {
        $this->send_Code16KParameters_toString($Code16KParametersDto);
        return $this->recv_Code16KParameters_toString();
    }

    public function send_Code16KParameters_toString(\Aspose\Barcode\Bridge\Code16KParametersDTO $Code16KParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code16KParameters_toString_args();
        $args->Code16KParametersDto = $Code16KParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Code16KParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Code16KParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Code16KParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code16KParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code16KParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Code16KParameters_toString failed: unknown result");
    }

    public function DotCodeParameters_toString(\Aspose\Barcode\Bridge\DotCodeParametersDTO $DotCodeParametersDto)
    {
        $this->send_DotCodeParameters_toString($DotCodeParametersDto);
        return $this->recv_DotCodeParameters_toString();
    }

    public function send_DotCodeParameters_toString(\Aspose\Barcode\Bridge\DotCodeParametersDTO $DotCodeParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DotCodeParameters_toString_args();
        $args->DotCodeParametersDto = $DotCodeParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'DotCodeParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('DotCodeParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_DotCodeParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DotCodeParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DotCodeParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("DotCodeParameters_toString failed: unknown result");
    }

    public function GS1CompositeBarParameters_toString(\Aspose\Barcode\Bridge\GS1CompositeBarParametersDTO $GS1CompositeBarParametersDto)
    {
        $this->send_GS1CompositeBarParameters_toString($GS1CompositeBarParametersDto);
        return $this->recv_GS1CompositeBarParameters_toString();
    }

    public function send_GS1CompositeBarParameters_toString(\Aspose\Barcode\Bridge\GS1CompositeBarParametersDTO $GS1CompositeBarParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_GS1CompositeBarParameters_toString_args();
        $args->GS1CompositeBarParametersDto = $GS1CompositeBarParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'GS1CompositeBarParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('GS1CompositeBarParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_GS1CompositeBarParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_GS1CompositeBarParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_GS1CompositeBarParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("GS1CompositeBarParameters_toString failed: unknown result");
    }

    public function ITFParameters_toString(\Aspose\Barcode\Bridge\ITFParametersDTO $ITFParametersDto)
    {
        $this->send_ITFParameters_toString($ITFParametersDto);
        return $this->recv_ITFParameters_toString();
    }

    public function send_ITFParameters_toString(\Aspose\Barcode\Bridge\ITFParametersDTO $ITFParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ITFParameters_toString_args();
        $args->ITFParametersDto = $ITFParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ITFParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ITFParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ITFParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ITFParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ITFParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ITFParameters_toString failed: unknown result");
    }

    public function QrParameters_toString(\Aspose\Barcode\Bridge\QrParametersDTO $QrParametersDto)
    {
        $this->send_QrParameters_toString($QrParametersDto);
        return $this->recv_QrParameters_toString();
    }

    public function send_QrParameters_toString(\Aspose\Barcode\Bridge\QrParametersDTO $QrParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QrParameters_toString_args();
        $args->QrParametersDto = $QrParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QrParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QrParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QrParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QrParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QrParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QrParameters_toString failed: unknown result");
    }

    public function Pdf417Parameters_toString(\Aspose\Barcode\Bridge\Pdf417ParametersDTO $Pdf417ParametersDto)
    {
        $this->send_Pdf417Parameters_toString($Pdf417ParametersDto);
        return $this->recv_Pdf417Parameters_toString();
    }

    public function send_Pdf417Parameters_toString(\Aspose\Barcode\Bridge\Pdf417ParametersDTO $Pdf417ParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Pdf417Parameters_toString_args();
        $args->Pdf417ParametersDto = $Pdf417ParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Pdf417Parameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Pdf417Parameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Pdf417Parameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Pdf417Parameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Pdf417Parameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Pdf417Parameters_toString failed: unknown result");
    }

    public function SupplementParameters_toString(\Aspose\Barcode\Bridge\SupplementParametersDTO $SupplementParametersDto)
    {
        $this->send_SupplementParameters_toString($SupplementParametersDto);
        return $this->recv_SupplementParameters_toString();
    }

    public function send_SupplementParameters_toString(\Aspose\Barcode\Bridge\SupplementParametersDTO $SupplementParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SupplementParameters_toString_args();
        $args->SupplementParametersDto = $SupplementParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SupplementParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SupplementParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SupplementParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SupplementParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SupplementParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SupplementParameters_toString failed: unknown result");
    }

    public function MaxiCodeParameters_toString(\Aspose\Barcode\Bridge\MaxiCodeParametersDTO $MaxiCodeParametersDto)
    {
        $this->send_MaxiCodeParameters_toString($MaxiCodeParametersDto);
        return $this->recv_MaxiCodeParameters_toString();
    }

    public function send_MaxiCodeParameters_toString(\Aspose\Barcode\Bridge\MaxiCodeParametersDTO $MaxiCodeParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeParameters_toString_args();
        $args->MaxiCodeParametersDto = $MaxiCodeParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeParameters_toString failed: unknown result");
    }

    public function PatchCodeParameters_toString(\Aspose\Barcode\Bridge\PatchCodeParametersDTO $PatchCodeParametersDto)
    {
        $this->send_PatchCodeParameters_toString($PatchCodeParametersDto);
        return $this->recv_PatchCodeParameters_toString();
    }

    public function send_PatchCodeParameters_toString(\Aspose\Barcode\Bridge\PatchCodeParametersDTO $PatchCodeParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PatchCodeParameters_toString_args();
        $args->PatchCodeParametersDto = $PatchCodeParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'PatchCodeParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('PatchCodeParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_PatchCodeParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PatchCodeParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PatchCodeParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("PatchCodeParameters_toString failed: unknown result");
    }

    public function Code128Parameters_toString(\Aspose\Barcode\Bridge\Code128ParametersDTO $Code128ParametersDto)
    {
        $this->send_Code128Parameters_toString($Code128ParametersDto);
        return $this->recv_Code128Parameters_toString();
    }

    public function send_Code128Parameters_toString(\Aspose\Barcode\Bridge\Code128ParametersDTO $Code128ParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code128Parameters_toString_args();
        $args->Code128ParametersDto = $Code128ParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Code128Parameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Code128Parameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Code128Parameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code128Parameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code128Parameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Code128Parameters_toString failed: unknown result");
    }

    public function HanXinParameters_toString(\Aspose\Barcode\Bridge\HanXinParametersDTO $HanXinParametersDto)
    {
        $this->send_HanXinParameters_toString($HanXinParametersDto);
        return $this->recv_HanXinParameters_toString();
    }

    public function send_HanXinParameters_toString(\Aspose\Barcode\Bridge\HanXinParametersDTO $HanXinParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HanXinParameters_toString_args();
        $args->HanXinParametersDto = $HanXinParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HanXinParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HanXinParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HanXinParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HanXinParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HanXinParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HanXinParameters_toString failed: unknown result");
    }

    public function AztecParameters_toString(\Aspose\Barcode\Bridge\AztecParametersDTO $AztecParametersDto)
    {
        $this->send_AztecParameters_toString($AztecParametersDto);
        return $this->recv_AztecParameters_toString();
    }

    public function send_AztecParameters_toString(\Aspose\Barcode\Bridge\AztecParametersDTO $AztecParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AztecParameters_toString_args();
        $args->AztecParametersDto = $AztecParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'AztecParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('AztecParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_AztecParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AztecParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AztecParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("AztecParameters_toString failed: unknown result");
    }

    public function CodabarParameters_toString(\Aspose\Barcode\Bridge\CodabarParametersDTO $CodabarParametersDto)
    {
        $this->send_CodabarParameters_toString($CodabarParametersDto);
        return $this->recv_CodabarParameters_toString();
    }

    public function send_CodabarParameters_toString(\Aspose\Barcode\Bridge\CodabarParametersDTO $CodabarParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodabarParameters_toString_args();
        $args->CodabarParametersDto = $CodabarParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CodabarParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CodabarParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CodabarParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodabarParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodabarParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("CodabarParameters_toString failed: unknown result");
    }

    public function CouponParameters_toString(\Aspose\Barcode\Bridge\CouponParametersDTO $CouponParametersDto)
    {
        $this->send_CouponParameters_toString($CouponParametersDto);
        return $this->recv_CouponParameters_toString();
    }

    public function send_CouponParameters_toString(\Aspose\Barcode\Bridge\CouponParametersDTO $CouponParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CouponParameters_toString_args();
        $args->CouponParametersDto = $CouponParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CouponParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CouponParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CouponParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CouponParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CouponParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("CouponParameters_toString failed: unknown result");
    }

    public function Unit_getPixels(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $this->send_Unit_getPixels($unitDto);
        return $this->recv_Unit_getPixels();
    }

    public function send_Unit_getPixels(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getPixels_args();
        $args->unitDto = $unitDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Unit_getPixels',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Unit_getPixels', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Unit_getPixels()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getPixels_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getPixels_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Unit_getPixels failed: unknown result");
    }

    public function Unit_getInches(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $this->send_Unit_getInches($unitDto);
        return $this->recv_Unit_getInches();
    }

    public function send_Unit_getInches(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getInches_args();
        $args->unitDto = $unitDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Unit_getInches',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Unit_getInches', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Unit_getInches()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getInches_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getInches_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Unit_getInches failed: unknown result");
    }

    public function Unit_getMillimeters(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $this->send_Unit_getMillimeters($unitDto);
        return $this->recv_Unit_getMillimeters();
    }

    public function send_Unit_getMillimeters(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getMillimeters_args();
        $args->unitDto = $unitDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Unit_getMillimeters',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Unit_getMillimeters', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Unit_getMillimeters()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getMillimeters_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getMillimeters_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Unit_getMillimeters failed: unknown result");
    }

    public function Unit_getPoint(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $this->send_Unit_getPoint($unitDto);
        return $this->recv_Unit_getPoint();
    }

    public function send_Unit_getPoint(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getPoint_args();
        $args->unitDto = $unitDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Unit_getPoint',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Unit_getPoint', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Unit_getPoint()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getPoint_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getPoint_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Unit_getPoint failed: unknown result");
    }

    public function Unit_getDocument(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $this->send_Unit_getDocument($unitDto);
        return $this->recv_Unit_getDocument();
    }

    public function send_Unit_getDocument(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getDocument_args();
        $args->unitDto = $unitDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Unit_getDocument',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Unit_getDocument', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Unit_getDocument()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getDocument_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_getDocument_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Unit_getDocument failed: unknown result");
    }

    public function Unit_toString(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $this->send_Unit_toString($unitDto);
        return $this->recv_Unit_toString();
    }

    public function send_Unit_toString(\Aspose\Barcode\Bridge\UnitDTO $unitDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_toString_args();
        $args->unitDto = $unitDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Unit_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Unit_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Unit_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Unit_toString failed: unknown result");
    }

    public function Unit_equals(\Aspose\Barcode\Bridge\UnitDTO $obj1, \Aspose\Barcode\Bridge\UnitDTO $obj2)
    {
        $this->send_Unit_equals($obj1, $obj2);
        return $this->recv_Unit_equals();
    }

    public function send_Unit_equals(\Aspose\Barcode\Bridge\UnitDTO $obj1, \Aspose\Barcode\Bridge\UnitDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Unit_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Unit_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Unit_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Unit_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Unit_equals failed: unknown result");
    }

    public function Padding_toString(\Aspose\Barcode\Bridge\PaddingDTO $PaddingDto)
    {
        $this->send_Padding_toString($PaddingDto);
        return $this->recv_Padding_toString();
    }

    public function send_Padding_toString(\Aspose\Barcode\Bridge\PaddingDTO $PaddingDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Padding_toString_args();
        $args->PaddingDto = $PaddingDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Padding_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Padding_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Padding_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Padding_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Padding_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Padding_toString failed: unknown result");
    }

    public function BorderParameters_toString(\Aspose\Barcode\Bridge\BorderParametersDTO $BorderParametersDto)
    {
        $this->send_BorderParameters_toString($BorderParametersDto);
        return $this->recv_BorderParameters_toString();
    }

    public function send_BorderParameters_toString(\Aspose\Barcode\Bridge\BorderParametersDTO $BorderParametersDto)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BorderParameters_toString_args();
        $args->BorderParametersDto = $BorderParametersDto;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BorderParameters_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BorderParameters_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BorderParameters_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BorderParameters_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BorderParameters_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BorderParameters_toString failed: unknown result");
    }

    public function ExtCodetextBuilder_getExtendedCodetext($codeTextBuilderType, array $extCodeItems)
    {
        $this->send_ExtCodetextBuilder_getExtendedCodetext($codeTextBuilderType, $extCodeItems);
        return $this->recv_ExtCodetextBuilder_getExtendedCodetext();
    }

    public function send_ExtCodetextBuilder_getExtendedCodetext($codeTextBuilderType, array $extCodeItems)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ExtCodetextBuilder_getExtendedCodetext_args();
        $args->codeTextBuilderType = $codeTextBuilderType;
        $args->extCodeItems = $extCodeItems;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExtCodetextBuilder_getExtendedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExtCodetextBuilder_getExtendedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExtCodetextBuilder_getExtendedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ExtCodetextBuilder_getExtendedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ExtCodetextBuilder_getExtendedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ExtCodetextBuilder_getExtendedCodetext failed: unknown result");
    }

    public function ComplexCodetextReader_tryDecodeMaxiCode($maxiCodeMode, $encodedCodetext)
    {
        $this->send_ComplexCodetextReader_tryDecodeMaxiCode($maxiCodeMode, $encodedCodetext);
        return $this->recv_ComplexCodetextReader_tryDecodeMaxiCode();
    }

    public function send_ComplexCodetextReader_tryDecodeMaxiCode($maxiCodeMode, $encodedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeMaxiCode_args();
        $args->maxiCodeMode = $maxiCodeMode;
        $args->encodedCodetext = $encodedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ComplexCodetextReader_tryDecodeMaxiCode',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ComplexCodetextReader_tryDecodeMaxiCode', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ComplexCodetextReader_tryDecodeMaxiCode()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeMaxiCode_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeMaxiCode_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ComplexCodetextReader_tryDecodeMaxiCode failed: unknown result");
    }

    public function ComplexCodetextReader_tryDecodeHIBCLIC($encodedCodetext)
    {
        $this->send_ComplexCodetextReader_tryDecodeHIBCLIC($encodedCodetext);
        return $this->recv_ComplexCodetextReader_tryDecodeHIBCLIC();
    }

    public function send_ComplexCodetextReader_tryDecodeHIBCLIC($encodedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeHIBCLIC_args();
        $args->encodedCodetext = $encodedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ComplexCodetextReader_tryDecodeHIBCLIC',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ComplexCodetextReader_tryDecodeHIBCLIC', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ComplexCodetextReader_tryDecodeHIBCLIC()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeHIBCLIC_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeHIBCLIC_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ComplexCodetextReader_tryDecodeHIBCLIC failed: unknown result");
    }

    public function ComplexCodetextReader_tryDecodeSwissQR($encodedCodetext)
    {
        $this->send_ComplexCodetextReader_tryDecodeSwissQR($encodedCodetext);
        return $this->recv_ComplexCodetextReader_tryDecodeSwissQR();
    }

    public function send_ComplexCodetextReader_tryDecodeSwissQR($encodedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeSwissQR_args();
        $args->encodedCodetext = $encodedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ComplexCodetextReader_tryDecodeSwissQR',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ComplexCodetextReader_tryDecodeSwissQR', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ComplexCodetextReader_tryDecodeSwissQR()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeSwissQR_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeSwissQR_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ComplexCodetextReader_tryDecodeSwissQR failed: unknown result");
    }

    public function ComplexCodetextReader_tryDecodeMailmark2D($encodedCodetext)
    {
        $this->send_ComplexCodetextReader_tryDecodeMailmark2D($encodedCodetext);
        return $this->recv_ComplexCodetextReader_tryDecodeMailmark2D();
    }

    public function send_ComplexCodetextReader_tryDecodeMailmark2D($encodedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeMailmark2D_args();
        $args->encodedCodetext = $encodedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ComplexCodetextReader_tryDecodeMailmark2D',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ComplexCodetextReader_tryDecodeMailmark2D', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ComplexCodetextReader_tryDecodeMailmark2D()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeMailmark2D_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeMailmark2D_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ComplexCodetextReader_tryDecodeMailmark2D failed: unknown result");
    }

    public function MailmarkCodetext_ctor()
    {
        $this->send_MailmarkCodetext_ctor();
        return $this->recv_MailmarkCodetext_ctor();
    }

    public function send_MailmarkCodetext_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MailmarkCodetext_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MailmarkCodetext_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MailmarkCodetext_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MailmarkCodetext_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MailmarkCodetext_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MailmarkCodetext_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MailmarkCodetext_ctor failed: unknown result");
    }

    public function ComplexBarcodeGenerator_generateBarcodeImage(\Aspose\Barcode\Bridge\ComplexBarcodeGeneratorDTO $complexBarcodeGeneratorDTO, $imageFormat, $base64LicenseContent)
    {
        $this->send_ComplexBarcodeGenerator_generateBarcodeImage($complexBarcodeGeneratorDTO, $imageFormat, $base64LicenseContent);
        return $this->recv_ComplexBarcodeGenerator_generateBarcodeImage();
    }

    public function send_ComplexBarcodeGenerator_generateBarcodeImage(\Aspose\Barcode\Bridge\ComplexBarcodeGeneratorDTO $complexBarcodeGeneratorDTO, $imageFormat, $base64LicenseContent)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexBarcodeGenerator_generateBarcodeImage_args();
        $args->complexBarcodeGeneratorDTO = $complexBarcodeGeneratorDTO;
        $args->imageFormat = $imageFormat;
        $args->base64LicenseContent = $base64LicenseContent;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ComplexBarcodeGenerator_generateBarcodeImage',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ComplexBarcodeGenerator_generateBarcodeImage', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ComplexBarcodeGenerator_generateBarcodeImage()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexBarcodeGenerator_generateBarcodeImage_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexBarcodeGenerator_generateBarcodeImage_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ComplexBarcodeGenerator_generateBarcodeImage failed: unknown result");
    }

    public function ComplexBarcodeGenerator_ctor(\Aspose\Barcode\Bridge\IComplexCodetextDTO $complexCodetext)
    {
        $this->send_ComplexBarcodeGenerator_ctor($complexCodetext);
        return $this->recv_ComplexBarcodeGenerator_ctor();
    }

    public function send_ComplexBarcodeGenerator_ctor(\Aspose\Barcode\Bridge\IComplexCodetextDTO $complexCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexBarcodeGenerator_ctor_args();
        $args->complexCodetext = $complexCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ComplexBarcodeGenerator_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ComplexBarcodeGenerator_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ComplexBarcodeGenerator_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexBarcodeGenerator_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexBarcodeGenerator_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ComplexBarcodeGenerator_ctor failed: unknown result");
    }

    public function Mailmark2DCodetext_ctor()
    {
        $this->send_Mailmark2DCodetext_ctor();
        return $this->recv_Mailmark2DCodetext_ctor();
    }

    public function send_Mailmark2DCodetext_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Mailmark2DCodetext_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Mailmark2DCodetext_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Mailmark2DCodetext_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Mailmark2DCodetext_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Mailmark2DCodetext_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Mailmark2DCodetext_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Mailmark2DCodetext_ctor failed: unknown result");
    }

    public function MailmarkCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $mailmarkCodetext, $constructedCodetext)
    {
        $this->send_MailmarkCodetext_initFromString($mailmarkCodetext, $constructedCodetext);
        return $this->recv_MailmarkCodetext_initFromString();
    }

    public function send_MailmarkCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $mailmarkCodetext, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MailmarkCodetext_initFromString_args();
        $args->mailmarkCodetext = $mailmarkCodetext;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MailmarkCodetext_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MailmarkCodetext_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MailmarkCodetext_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MailmarkCodetext_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MailmarkCodetext_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MailmarkCodetext_initFromString failed: unknown result");
    }

    public function MailmarkCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $mailmarkCodetext)
    {
        $this->send_MailmarkCodetext_getConstructedCodetext($mailmarkCodetext);
        return $this->recv_MailmarkCodetext_getConstructedCodetext();
    }

    public function send_MailmarkCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $mailmarkCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MailmarkCodetext_getConstructedCodetext_args();
        $args->mailmarkCodetext = $mailmarkCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MailmarkCodetext_getConstructedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MailmarkCodetext_getConstructedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MailmarkCodetext_getConstructedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MailmarkCodetext_getConstructedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MailmarkCodetext_getConstructedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MailmarkCodetext_getConstructedCodetext failed: unknown result");
    }

    public function SwissQRCodetext_ctor()
    {
        $this->send_SwissQRCodetext_ctor();
        return $this->recv_SwissQRCodetext_ctor();
    }

    public function send_SwissQRCodetext_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SwissQRCodetext_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SwissQRCodetext_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SwissQRCodetext_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SwissQRCodetext_ctor failed: unknown result");
    }

    public function SwissQRCodetext_ctorSwissQRBill(\Aspose\Barcode\Bridge\SwissQRBillDTO $swissQRBill)
    {
        $this->send_SwissQRCodetext_ctorSwissQRBill($swissQRBill);
        return $this->recv_SwissQRCodetext_ctorSwissQRBill();
    }

    public function send_SwissQRCodetext_ctorSwissQRBill(\Aspose\Barcode\Bridge\SwissQRBillDTO $swissQRBill)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_ctorSwissQRBill_args();
        $args->swissQRBill = $swissQRBill;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SwissQRCodetext_ctorSwissQRBill',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SwissQRCodetext_ctorSwissQRBill', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SwissQRCodetext_ctorSwissQRBill()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_ctorSwissQRBill_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_ctorSwissQRBill_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SwissQRCodetext_ctorSwissQRBill failed: unknown result");
    }

    public function SwissQRCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $swissQRCodetext)
    {
        $this->send_SwissQRCodetext_getConstructedCodetext($swissQRCodetext);
        return $this->recv_SwissQRCodetext_getConstructedCodetext();
    }

    public function send_SwissQRCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $swissQRCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_getConstructedCodetext_args();
        $args->swissQRCodetext = $swissQRCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SwissQRCodetext_getConstructedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SwissQRCodetext_getConstructedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SwissQRCodetext_getConstructedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_getConstructedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_getConstructedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SwissQRCodetext_getConstructedCodetext failed: unknown result");
    }

    public function SwissQRBill_equals(\Aspose\Barcode\Bridge\SwissQRBillDTO $obj1, \Aspose\Barcode\Bridge\SwissQRBillDTO $obj2)
    {
        $this->send_SwissQRBill_equals($obj1, $obj2);
        return $this->recv_SwissQRBill_equals();
    }

    public function send_SwissQRBill_equals(\Aspose\Barcode\Bridge\SwissQRBillDTO $obj1, \Aspose\Barcode\Bridge\SwissQRBillDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRBill_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SwissQRBill_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SwissQRBill_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SwissQRBill_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRBill_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRBill_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SwissQRBill_equals failed: unknown result");
    }

    public function SwissQRBill_createAndSetCreditorReference(\Aspose\Barcode\Bridge\SwissQRBillDTO $swissQRBillDTO, $rawReference)
    {
        $this->send_SwissQRBill_createAndSetCreditorReference($swissQRBillDTO, $rawReference);
        return $this->recv_SwissQRBill_createAndSetCreditorReference();
    }

    public function send_SwissQRBill_createAndSetCreditorReference(\Aspose\Barcode\Bridge\SwissQRBillDTO $swissQRBillDTO, $rawReference)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRBill_createAndSetCreditorReference_args();
        $args->swissQRBillDTO = $swissQRBillDTO;
        $args->rawReference = $rawReference;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SwissQRBill_createAndSetCreditorReference',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SwissQRBill_createAndSetCreditorReference', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SwissQRBill_createAndSetCreditorReference()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRBill_createAndSetCreditorReference_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRBill_createAndSetCreditorReference_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SwissQRBill_createAndSetCreditorReference failed: unknown result");
    }

    public function MaxiCodeStandardCodetext_ctor()
    {
        $this->send_MaxiCodeStandardCodetext_ctor();
        return $this->recv_MaxiCodeStandardCodetext_ctor();
    }

    public function send_MaxiCodeStandardCodetext_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandardCodetext_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeStandardCodetext_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeStandardCodetext_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeStandardCodetext_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandardCodetext_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandardCodetext_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeStandardCodetext_ctor failed: unknown result");
    }

    public function MaxiCodeStandartSecondMessage_equals(\Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $obj1, \Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $obj2)
    {
        $this->send_MaxiCodeStandartSecondMessage_equals($obj1, $obj2);
        return $this->recv_MaxiCodeStandartSecondMessage_equals();
    }

    public function send_MaxiCodeStandartSecondMessage_equals(\Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $obj1, \Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandartSecondMessage_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeStandartSecondMessage_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeStandartSecondMessage_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeStandartSecondMessage_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandartSecondMessage_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandartSecondMessage_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeStandartSecondMessage_equals failed: unknown result");
    }

    public function MaxiCodeStandardCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $this->send_MaxiCodeStandardCodetext_equals($obj1, $obj2);
        return $this->recv_MaxiCodeStandardCodetext_equals();
    }

    public function send_MaxiCodeStandardCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandardCodetext_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeStandardCodetext_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeStandardCodetext_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeStandardCodetext_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandardCodetext_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandardCodetext_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeStandardCodetext_equals failed: unknown result");
    }

    public function HIBCLICPrimaryDataCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $this->send_HIBCLICPrimaryDataCodetext_equals($obj1, $obj2);
        return $this->recv_HIBCLICPrimaryDataCodetext_equals();
    }

    public function send_HIBCLICPrimaryDataCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICPrimaryDataCodetext_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICPrimaryDataCodetext_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICPrimaryDataCodetext_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICPrimaryDataCodetext_equals failed: unknown result");
    }

    public function HIBCLICCombinedCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $this->send_HIBCLICCombinedCodetext_equals($obj1, $obj2);
        return $this->recv_HIBCLICCombinedCodetext_equals();
    }

    public function send_HIBCLICCombinedCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICCombinedCodetext_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICCombinedCodetext_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICCombinedCodetext_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICCombinedCodetext_equals failed: unknown result");
    }

    public function HIBCLICSecondaryAndAdditionalDataCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $this->send_HIBCLICSecondaryAndAdditionalDataCodetext_equals($obj1, $obj2);
        return $this->recv_HIBCLICSecondaryAndAdditionalDataCodetext_equals();
    }

    public function send_HIBCLICSecondaryAndAdditionalDataCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICSecondaryAndAdditionalDataCodetext_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICSecondaryAndAdditionalDataCodetext_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICSecondaryAndAdditionalDataCodetext_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICSecondaryAndAdditionalDataCodetext_equals failed: unknown result");
    }

    public function HIBCLICPrimaryDataCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICPrimaryDataCodetext)
    {
        $this->send_HIBCLICPrimaryDataCodetext_getConstructedCodetext($HIBCLICPrimaryDataCodetext);
        return $this->recv_HIBCLICPrimaryDataCodetext_getConstructedCodetext();
    }

    public function send_HIBCLICPrimaryDataCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICPrimaryDataCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_getConstructedCodetext_args();
        $args->HIBCLICPrimaryDataCodetext = $HIBCLICPrimaryDataCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICPrimaryDataCodetext_getConstructedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICPrimaryDataCodetext_getConstructedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICPrimaryDataCodetext_getConstructedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_getConstructedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_getConstructedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICPrimaryDataCodetext_getConstructedCodetext failed: unknown result");
    }

    public function HIBCPASCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCPASCodetext)
    {
        $this->send_HIBCPASCodetext_getConstructedCodetext($HIBCPASCodetext);
        return $this->recv_HIBCPASCodetext_getConstructedCodetext();
    }

    public function send_HIBCPASCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCPASCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_getConstructedCodetext_args();
        $args->HIBCPASCodetext = $HIBCPASCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCPASCodetext_getConstructedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCPASCodetext_getConstructedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCPASCodetext_getConstructedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_getConstructedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_getConstructedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCPASCodetext_getConstructedCodetext failed: unknown result");
    }

    public function HIBCPASCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $this->send_HIBCPASCodetext_equals($obj1, $obj2);
        return $this->recv_HIBCPASCodetext_equals();
    }

    public function send_HIBCPASCodetext_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCPASCodetext_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCPASCodetext_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCPASCodetext_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCPASCodetext_equals failed: unknown result");
    }

    public function HIBCPASCodetext_hashCode(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1)
    {
        $this->send_HIBCPASCodetext_hashCode($obj1);
        return $this->recv_HIBCPASCodetext_hashCode();
    }

    public function send_HIBCPASCodetext_hashCode(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_hashCode_args();
        $args->obj1 = $obj1;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCPASCodetext_hashCode',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCPASCodetext_hashCode', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCPASCodetext_hashCode()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_hashCode_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_hashCode_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCPASCodetext_hashCode failed: unknown result");
    }

    public function HIBCPASCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCPASCodetext, $constructedCodetext)
    {
        $this->send_HIBCPASCodetext_initFromString($HIBCPASCodetext, $constructedCodetext);
        return $this->recv_HIBCPASCodetext_initFromString();
    }

    public function send_HIBCPASCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCPASCodetext, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_initFromString_args();
        $args->HIBCPASCodetext = $HIBCPASCodetext;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCPASCodetext_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCPASCodetext_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCPASCodetext_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCPASCodetext_initFromString failed: unknown result");
    }

    public function HIBCPASCodetext_ctor()
    {
        $this->send_HIBCPASCodetext_ctor();
        return $this->recv_HIBCPASCodetext_ctor();
    }

    public function send_HIBCPASCodetext_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCPASCodetext_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCPASCodetext_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCPASCodetext_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASCodetext_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCPASCodetext_ctor failed: unknown result");
    }

    public function ComplexCodetextReader_tryDecodeHIBCPAS($encodedCodetext)
    {
        $this->send_ComplexCodetextReader_tryDecodeHIBCPAS($encodedCodetext);
        return $this->recv_ComplexCodetextReader_tryDecodeHIBCPAS();
    }

    public function send_ComplexCodetextReader_tryDecodeHIBCPAS($encodedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeHIBCPAS_args();
        $args->encodedCodetext = $encodedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ComplexCodetextReader_tryDecodeHIBCPAS',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ComplexCodetextReader_tryDecodeHIBCPAS', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ComplexCodetextReader_tryDecodeHIBCPAS()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeHIBCPAS_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_ComplexCodetextReader_tryDecodeHIBCPAS_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("ComplexCodetextReader_tryDecodeHIBCPAS failed: unknown result");
    }

    public function HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICSecondaryAndAdditionalDataCodetext)
    {
        $this->send_HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext($HIBCLICSecondaryAndAdditionalDataCodetext);
        return $this->recv_HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext();
    }

    public function send_HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICSecondaryAndAdditionalDataCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext_args();
        $args->HIBCLICSecondaryAndAdditionalDataCodetext = $HIBCLICSecondaryAndAdditionalDataCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICSecondaryAndAdditionalDataCodetext_getConstructedCodetext failed: unknown result");
    }

    public function HIBCLICSecondaryAndAdditionalDataCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICSecondaryAndAdditionalDataCodetext, $constructedCodetext)
    {
        $this->send_HIBCLICSecondaryAndAdditionalDataCodetext_initFromString($HIBCLICSecondaryAndAdditionalDataCodetext, $constructedCodetext);
        return $this->recv_HIBCLICSecondaryAndAdditionalDataCodetext_initFromString();
    }

    public function send_HIBCLICSecondaryAndAdditionalDataCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICSecondaryAndAdditionalDataCodetext, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_initFromString_args();
        $args->HIBCLICSecondaryAndAdditionalDataCodetext = $HIBCLICSecondaryAndAdditionalDataCodetext;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICSecondaryAndAdditionalDataCodetext_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICSecondaryAndAdditionalDataCodetext_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICSecondaryAndAdditionalDataCodetext_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICSecondaryAndAdditionalDataCodetext_initFromString failed: unknown result");
    }

    public function Mailmark2DCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $mailmark2DCodetext, $constructedCodetext)
    {
        $this->send_Mailmark2DCodetext_initFromString($mailmark2DCodetext, $constructedCodetext);
        return $this->recv_Mailmark2DCodetext_initFromString();
    }

    public function send_Mailmark2DCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $mailmark2DCodetext, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Mailmark2DCodetext_initFromString_args();
        $args->mailmark2DCodetext = $mailmark2DCodetext;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Mailmark2DCodetext_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Mailmark2DCodetext_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Mailmark2DCodetext_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Mailmark2DCodetext_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Mailmark2DCodetext_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Mailmark2DCodetext_initFromString failed: unknown result");
    }

    public function HIBCLICSecondaryAndAdditionalDataCodetext_ctor()
    {
        $this->send_HIBCLICSecondaryAndAdditionalDataCodetext_ctor();
        return $this->recv_HIBCLICSecondaryAndAdditionalDataCodetext_ctor();
    }

    public function send_HIBCLICSecondaryAndAdditionalDataCodetext_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICSecondaryAndAdditionalDataCodetext_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICSecondaryAndAdditionalDataCodetext_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICSecondaryAndAdditionalDataCodetext_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICSecondaryAndAdditionalDataCodetext_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICSecondaryAndAdditionalDataCodetext_ctor failed: unknown result");
    }

    public function HIBCLICCombinedCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICCombinedCodetext)
    {
        $this->send_HIBCLICCombinedCodetext_getConstructedCodetext($HIBCLICCombinedCodetext);
        return $this->recv_HIBCLICCombinedCodetext_getConstructedCodetext();
    }

    public function send_HIBCLICCombinedCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICCombinedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_getConstructedCodetext_args();
        $args->HIBCLICCombinedCodetext = $HIBCLICCombinedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICCombinedCodetext_getConstructedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICCombinedCodetext_getConstructedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICCombinedCodetext_getConstructedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_getConstructedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_getConstructedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICCombinedCodetext_getConstructedCodetext failed: unknown result");
    }

    public function Mailmark2DCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $mailmark2DCodetext)
    {
        $this->send_Mailmark2DCodetext_getConstructedCodetext($mailmark2DCodetext);
        return $this->recv_Mailmark2DCodetext_getConstructedCodetext();
    }

    public function send_Mailmark2DCodetext_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $mailmark2DCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Mailmark2DCodetext_getConstructedCodetext_args();
        $args->mailmark2DCodetext = $mailmark2DCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Mailmark2DCodetext_getConstructedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Mailmark2DCodetext_getConstructedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Mailmark2DCodetext_getConstructedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Mailmark2DCodetext_getConstructedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Mailmark2DCodetext_getConstructedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Mailmark2DCodetext_getConstructedCodetext failed: unknown result");
    }

    public function SecondaryAndAdditionalData_ctor()
    {
        $this->send_SecondaryAndAdditionalData_ctor();
        return $this->recv_SecondaryAndAdditionalData_ctor();
    }

    public function send_SecondaryAndAdditionalData_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SecondaryAndAdditionalData_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SecondaryAndAdditionalData_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SecondaryAndAdditionalData_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SecondaryAndAdditionalData_ctor failed: unknown result");
    }

    public function HIBCLICCombinedCodetext_ctor()
    {
        $this->send_HIBCLICCombinedCodetext_ctor();
        return $this->recv_HIBCLICCombinedCodetext_ctor();
    }

    public function send_HIBCLICCombinedCodetext_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICCombinedCodetext_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICCombinedCodetext_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICCombinedCodetext_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICCombinedCodetext_ctor failed: unknown result");
    }

    public function HIBCLICPrimaryDataCodetext_ctor()
    {
        $this->send_HIBCLICPrimaryDataCodetext_ctor();
        return $this->recv_HIBCLICPrimaryDataCodetext_ctor();
    }

    public function send_HIBCLICPrimaryDataCodetext_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICPrimaryDataCodetext_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICPrimaryDataCodetext_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICPrimaryDataCodetext_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICPrimaryDataCodetext_ctor failed: unknown result");
    }

    public function HIBCLICCombinedCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICCombinedCodetext, $constructedCodetext)
    {
        $this->send_HIBCLICCombinedCodetext_initFromString($HIBCLICCombinedCodetext, $constructedCodetext);
        return $this->recv_HIBCLICCombinedCodetext_initFromString();
    }

    public function send_HIBCLICCombinedCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICCombinedCodetext, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_initFromString_args();
        $args->HIBCLICCombinedCodetext = $HIBCLICCombinedCodetext;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICCombinedCodetext_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICCombinedCodetext_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICCombinedCodetext_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICCombinedCodetext_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICCombinedCodetext_initFromString failed: unknown result");
    }

    public function HIBCLICPrimaryDataCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICPrimaryDataCodetext, $constructedCodetext)
    {
        $this->send_HIBCLICPrimaryDataCodetext_initFromString($HIBCLICPrimaryDataCodetext, $constructedCodetext);
        return $this->recv_HIBCLICPrimaryDataCodetext_initFromString();
    }

    public function send_HIBCLICPrimaryDataCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $HIBCLICPrimaryDataCodetext, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_initFromString_args();
        $args->HIBCLICPrimaryDataCodetext = $HIBCLICPrimaryDataCodetext;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCLICPrimaryDataCodetext_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCLICPrimaryDataCodetext_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCLICPrimaryDataCodetext_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCLICPrimaryDataCodetext_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCLICPrimaryDataCodetext_initFromString failed: unknown result");
    }

    public function SecondaryAndAdditionalData_toString(\Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO $secondaryAndAdditionalDataDTO)
    {
        $this->send_SecondaryAndAdditionalData_toString($secondaryAndAdditionalDataDTO);
        return $this->recv_SecondaryAndAdditionalData_toString();
    }

    public function send_SecondaryAndAdditionalData_toString(\Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO $secondaryAndAdditionalDataDTO)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_toString_args();
        $args->secondaryAndAdditionalDataDTO = $secondaryAndAdditionalDataDTO;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SecondaryAndAdditionalData_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SecondaryAndAdditionalData_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SecondaryAndAdditionalData_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SecondaryAndAdditionalData_toString failed: unknown result");
    }

    public function SecondaryAndAdditionalData_parseFromString(\Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO $secondaryAndAdditionalDataDTO, $secondaryDataCodetext)
    {
        $this->send_SecondaryAndAdditionalData_parseFromString($secondaryAndAdditionalDataDTO, $secondaryDataCodetext);
        return $this->recv_SecondaryAndAdditionalData_parseFromString();
    }

    public function send_SecondaryAndAdditionalData_parseFromString(\Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO $secondaryAndAdditionalDataDTO, $secondaryDataCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_parseFromString_args();
        $args->secondaryAndAdditionalDataDTO = $secondaryAndAdditionalDataDTO;
        $args->secondaryDataCodetext = $secondaryDataCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SecondaryAndAdditionalData_parseFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SecondaryAndAdditionalData_parseFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SecondaryAndAdditionalData_parseFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_parseFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_parseFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SecondaryAndAdditionalData_parseFromString failed: unknown result");
    }

    public function SecondaryAndAdditionalData_equals(\Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO $obj1, \Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO $obj2)
    {
        $this->send_SecondaryAndAdditionalData_equals($obj1, $obj2);
        return $this->recv_SecondaryAndAdditionalData_equals();
    }

    public function send_SecondaryAndAdditionalData_equals(\Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO $obj1, \Aspose\Barcode\Bridge\SecondaryAndAdditionalDataDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SecondaryAndAdditionalData_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SecondaryAndAdditionalData_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SecondaryAndAdditionalData_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SecondaryAndAdditionalData_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SecondaryAndAdditionalData_equals failed: unknown result");
    }

    public function PrimaryData_ctor()
    {
        $this->send_PrimaryData_ctor();
        return $this->recv_PrimaryData_ctor();
    }

    public function send_PrimaryData_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'PrimaryData_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('PrimaryData_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_PrimaryData_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("PrimaryData_ctor failed: unknown result");
    }

    public function PrimaryData_toString(\Aspose\Barcode\Bridge\PrimaryDataDTO $primaryDataDTO)
    {
        $this->send_PrimaryData_toString($primaryDataDTO);
        return $this->recv_PrimaryData_toString();
    }

    public function send_PrimaryData_toString(\Aspose\Barcode\Bridge\PrimaryDataDTO $primaryDataDTO)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_toString_args();
        $args->primaryDataDTO = $primaryDataDTO;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'PrimaryData_toString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('PrimaryData_toString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_PrimaryData_toString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_toString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_toString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("PrimaryData_toString failed: unknown result");
    }

    public function PrimaryData_parseFromString(\Aspose\Barcode\Bridge\PrimaryDataDTO $primaryDataDTO, $primaryDataCodetext)
    {
        $this->send_PrimaryData_parseFromString($primaryDataDTO, $primaryDataCodetext);
        return $this->recv_PrimaryData_parseFromString();
    }

    public function send_PrimaryData_parseFromString(\Aspose\Barcode\Bridge\PrimaryDataDTO $primaryDataDTO, $primaryDataCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_parseFromString_args();
        $args->primaryDataDTO = $primaryDataDTO;
        $args->primaryDataCodetext = $primaryDataCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'PrimaryData_parseFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('PrimaryData_parseFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_PrimaryData_parseFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_parseFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_parseFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("PrimaryData_parseFromString failed: unknown result");
    }

    public function PrimaryData_equals(\Aspose\Barcode\Bridge\PrimaryDataDTO $obj1, \Aspose\Barcode\Bridge\PrimaryDataDTO $obj2)
    {
        $this->send_PrimaryData_equals($obj1, $obj2);
        return $this->recv_PrimaryData_equals();
    }

    public function send_PrimaryData_equals(\Aspose\Barcode\Bridge\PrimaryDataDTO $obj1, \Aspose\Barcode\Bridge\PrimaryDataDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'PrimaryData_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('PrimaryData_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_PrimaryData_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_PrimaryData_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("PrimaryData_equals failed: unknown result");
    }

    public function MaxiCodeCodetextMode2_ctor()
    {
        $this->send_MaxiCodeCodetextMode2_ctor();
        return $this->recv_MaxiCodeCodetextMode2_ctor();
    }

    public function send_MaxiCodeCodetextMode2_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeCodetextMode2_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeCodetextMode2_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeCodetextMode2_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeCodetextMode2_ctor failed: unknown result");
    }

    public function MaxiCodeCodetextMode2_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $this->send_MaxiCodeCodetextMode2_equals($obj1, $obj2);
        return $this->recv_MaxiCodeCodetextMode2_equals();
    }

    public function send_MaxiCodeCodetextMode2_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeCodetextMode2_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeCodetextMode2_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeCodetextMode2_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeCodetextMode2_equals failed: unknown result");
    }

    public function MaxiCodeCodetextMode2_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, $constructedCodetext)
    {
        $this->send_MaxiCodeCodetextMode2_initFromString($obj1, $constructedCodetext);
        return $this->recv_MaxiCodeCodetextMode2_initFromString();
    }

    public function send_MaxiCodeCodetextMode2_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_initFromString_args();
        $args->obj1 = $obj1;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeCodetextMode2_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeCodetextMode2_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeCodetextMode2_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeCodetextMode2_initFromString failed: unknown result");
    }

    public function MaxiCodeCodetextMode3_ctor()
    {
        $this->send_MaxiCodeCodetextMode3_ctor();
        return $this->recv_MaxiCodeCodetextMode3_ctor();
    }

    public function send_MaxiCodeCodetextMode3_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeCodetextMode3_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeCodetextMode3_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeCodetextMode3_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeCodetextMode3_ctor failed: unknown result");
    }

    public function MaxiCodeCodetextMode3_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $this->send_MaxiCodeCodetextMode3_equals($obj1, $obj2);
        return $this->recv_MaxiCodeCodetextMode3_equals();
    }

    public function send_MaxiCodeCodetextMode3_equals(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, \Aspose\Barcode\Bridge\IComplexCodetextDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeCodetextMode3_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeCodetextMode3_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeCodetextMode3_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeCodetextMode3_equals failed: unknown result");
    }

    public function MaxiCodeCodetextMode3_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, $constructedCodetext)
    {
        $this->send_MaxiCodeCodetextMode3_initFromString($obj1, $constructedCodetext);
        return $this->recv_MaxiCodeCodetextMode3_initFromString();
    }

    public function send_MaxiCodeCodetextMode3_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $obj1, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_initFromString_args();
        $args->obj1 = $obj1;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeCodetextMode3_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeCodetextMode3_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeCodetextMode3_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeCodetextMode3_initFromString failed: unknown result");
    }

    public function SwissQRCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $swissQRCodetext, $constructedCodetext)
    {
        $this->send_SwissQRCodetext_initFromString($swissQRCodetext, $constructedCodetext);
        return $this->recv_SwissQRCodetext_initFromString();
    }

    public function send_SwissQRCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $swissQRCodetext, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_initFromString_args();
        $args->swissQRCodetext = $swissQRCodetext;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'SwissQRCodetext_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('SwissQRCodetext_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_SwissQRCodetext_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_SwissQRCodetext_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("SwissQRCodetext_initFromString failed: unknown result");
    }

    public function MaxiCodeStandardCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $maxiCodeStandardCodetex, $constructedCodetext)
    {
        $this->send_MaxiCodeStandardCodetext_initFromString($maxiCodeStandardCodetex, $constructedCodetext);
        return $this->recv_MaxiCodeStandardCodetext_initFromString();
    }

    public function send_MaxiCodeStandardCodetext_initFromString(\Aspose\Barcode\Bridge\IComplexCodetextDTO $maxiCodeStandardCodetex, $constructedCodetext)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandardCodetext_initFromString_args();
        $args->maxiCodeStandardCodetex = $maxiCodeStandardCodetex;
        $args->constructedCodetext = $constructedCodetext;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeStandardCodetext_initFromString',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeStandardCodetext_initFromString', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeStandardCodetext_initFromString()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandardCodetext_initFromString_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandardCodetext_initFromString_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeStandardCodetext_initFromString failed: unknown result");
    }

    public function HIBCPASRecord_equals(\Aspose\Barcode\Bridge\HIBCPASRecordDTO $obj1, \Aspose\Barcode\Bridge\HIBCPASRecordDTO $obj2)
    {
        $this->send_HIBCPASRecord_equals($obj1, $obj2);
        return $this->recv_HIBCPASRecord_equals();
    }

    public function send_HIBCPASRecord_equals(\Aspose\Barcode\Bridge\HIBCPASRecordDTO $obj1, \Aspose\Barcode\Bridge\HIBCPASRecordDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASRecord_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'HIBCPASRecord_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('HIBCPASRecord_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_HIBCPASRecord_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASRecord_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_HIBCPASRecord_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("HIBCPASRecord_equals failed: unknown result");
    }

    public function MaxiCodeStandartSecondMessage_ctor()
    {
        $this->send_MaxiCodeStandartSecondMessage_ctor();
        return $this->recv_MaxiCodeStandartSecondMessage_ctor();
    }

    public function send_MaxiCodeStandartSecondMessage_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandartSecondMessage_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeStandartSecondMessage_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeStandartSecondMessage_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeStandartSecondMessage_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandartSecondMessage_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandartSecondMessage_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeStandartSecondMessage_ctor failed: unknown result");
    }

    public function MaxiCodeStructuredSecondMessage_getMessage(\Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $maxiCodeStructuredSecondMessage)
    {
        $this->send_MaxiCodeStructuredSecondMessage_getMessage($maxiCodeStructuredSecondMessage);
        return $this->recv_MaxiCodeStructuredSecondMessage_getMessage();
    }

    public function send_MaxiCodeStructuredSecondMessage_getMessage(\Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $maxiCodeStructuredSecondMessage)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStructuredSecondMessage_getMessage_args();
        $args->maxiCodeStructuredSecondMessage = $maxiCodeStructuredSecondMessage;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeStructuredSecondMessage_getMessage',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeStructuredSecondMessage_getMessage', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeStructuredSecondMessage_getMessage()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStructuredSecondMessage_getMessage_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStructuredSecondMessage_getMessage_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeStructuredSecondMessage_getMessage failed: unknown result");
    }

    public function MaxiCodeStandartSecondMessage_getMessage(\Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $maxiCodeStandartSecondMessage)
    {
        $this->send_MaxiCodeStandartSecondMessage_getMessage($maxiCodeStandartSecondMessage);
        return $this->recv_MaxiCodeStandartSecondMessage_getMessage();
    }

    public function send_MaxiCodeStandartSecondMessage_getMessage(\Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $maxiCodeStandartSecondMessage)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandartSecondMessage_getMessage_args();
        $args->maxiCodeStandartSecondMessage = $maxiCodeStandartSecondMessage;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeStandartSecondMessage_getMessage',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeStandartSecondMessage_getMessage', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeStandartSecondMessage_getMessage()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandartSecondMessage_getMessage_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStandartSecondMessage_getMessage_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeStandartSecondMessage_getMessage failed: unknown result");
    }

    public function MaxiCodeStructuredSecondMessage_ctor()
    {
        $this->send_MaxiCodeStructuredSecondMessage_ctor();
        return $this->recv_MaxiCodeStructuredSecondMessage_ctor();
    }

    public function send_MaxiCodeStructuredSecondMessage_ctor()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStructuredSecondMessage_ctor_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeStructuredSecondMessage_ctor',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeStructuredSecondMessage_ctor', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeStructuredSecondMessage_ctor()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStructuredSecondMessage_ctor_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStructuredSecondMessage_ctor_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeStructuredSecondMessage_ctor failed: unknown result");
    }

    public function MaxiCodeStructuredSecondMessage_equals(\Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $obj_1, \Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $obj_2)
    {
        $this->send_MaxiCodeStructuredSecondMessage_equals($obj_1, $obj_2);
        return $this->recv_MaxiCodeStructuredSecondMessage_equals();
    }

    public function send_MaxiCodeStructuredSecondMessage_equals(\Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $obj_1, \Aspose\Barcode\Bridge\MaxiCodeSecondMessageDTO $obj_2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStructuredSecondMessage_equals_args();
        $args->obj_1 = $obj_1;
        $args->obj_2 = $obj_2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeStructuredSecondMessage_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeStructuredSecondMessage_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeStructuredSecondMessage_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStructuredSecondMessage_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeStructuredSecondMessage_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeStructuredSecondMessage_equals failed: unknown result");
    }

    public function MaxiCodeCodetextMode2_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $maxiCodeCodetextMode2DTO)
    {
        $this->send_MaxiCodeCodetextMode2_getConstructedCodetext($maxiCodeCodetextMode2DTO);
        return $this->recv_MaxiCodeCodetextMode2_getConstructedCodetext();
    }

    public function send_MaxiCodeCodetextMode2_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $maxiCodeCodetextMode2DTO)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_getConstructedCodetext_args();
        $args->maxiCodeCodetextMode2DTO = $maxiCodeCodetextMode2DTO;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeCodetextMode2_getConstructedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeCodetextMode2_getConstructedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeCodetextMode2_getConstructedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_getConstructedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode2_getConstructedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeCodetextMode2_getConstructedCodetext failed: unknown result");
    }

    public function MaxiCodeCodetextMode3_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $maxiCodeCodetextMode3DTO)
    {
        $this->send_MaxiCodeCodetextMode3_getConstructedCodetext($maxiCodeCodetextMode3DTO);
        return $this->recv_MaxiCodeCodetextMode3_getConstructedCodetext();
    }

    public function send_MaxiCodeCodetextMode3_getConstructedCodetext(\Aspose\Barcode\Bridge\IComplexCodetextDTO $maxiCodeCodetextMode3DTO)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_getConstructedCodetext_args();
        $args->maxiCodeCodetextMode3DTO = $maxiCodeCodetextMode3DTO;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeCodetextMode3_getConstructedCodetext',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeCodetextMode3_getConstructedCodetext', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeCodetextMode3_getConstructedCodetext()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_getConstructedCodetext_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeCodetextMode3_getConstructedCodetext_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeCodetextMode3_getConstructedCodetext failed: unknown result");
    }

    public function AlternativeScheme_equals(\Aspose\Barcode\Bridge\AlternativeSchemeDTO $obj1, \Aspose\Barcode\Bridge\AlternativeSchemeDTO $obj2)
    {
        $this->send_AlternativeScheme_equals($obj1, $obj2);
        return $this->recv_AlternativeScheme_equals();
    }

    public function send_AlternativeScheme_equals(\Aspose\Barcode\Bridge\AlternativeSchemeDTO $obj1, \Aspose\Barcode\Bridge\AlternativeSchemeDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AlternativeScheme_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'AlternativeScheme_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('AlternativeScheme_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_AlternativeScheme_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AlternativeScheme_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AlternativeScheme_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("AlternativeScheme_equals failed: unknown result");
    }

    public function Address_equals(\Aspose\Barcode\Bridge\AddressDTO $obj1, \Aspose\Barcode\Bridge\AddressDTO $obj2)
    {
        $this->send_Address_equals($obj1, $obj2);
        return $this->recv_Address_equals();
    }

    public function send_Address_equals(\Aspose\Barcode\Bridge\AddressDTO $obj1, \Aspose\Barcode\Bridge\AddressDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Address_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Address_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Address_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Address_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Address_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Address_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Address_equals failed: unknown result");
    }

    public function Quadrangle_equals(\Aspose\Barcode\Bridge\QuadrangleDTO $obj1, \Aspose\Barcode\Bridge\QuadrangleDTO $obj2)
    {
        $this->send_Quadrangle_equals($obj1, $obj2);
        return $this->recv_Quadrangle_equals();
    }

    public function send_Quadrangle_equals(\Aspose\Barcode\Bridge\QuadrangleDTO $obj1, \Aspose\Barcode\Bridge\QuadrangleDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Quadrangle_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Quadrangle_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Quadrangle_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Quadrangle_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Quadrangle_equals failed: unknown result");
    }

    public function GS1CompositeBarExtendedParameters_equals(\Aspose\Barcode\Bridge\GS1CompositeBarExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\GS1CompositeBarExtendedParametersDTO $obj2)
    {
        $this->send_GS1CompositeBarExtendedParameters_equals($obj1, $obj2);
        return $this->recv_GS1CompositeBarExtendedParameters_equals();
    }

    public function send_GS1CompositeBarExtendedParameters_equals(\Aspose\Barcode\Bridge\GS1CompositeBarExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\GS1CompositeBarExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_GS1CompositeBarExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'GS1CompositeBarExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('GS1CompositeBarExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_GS1CompositeBarExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_GS1CompositeBarExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_GS1CompositeBarExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("GS1CompositeBarExtendedParameters_equals failed: unknown result");
    }

    public function AztecExtendedParameters_equals(\Aspose\Barcode\Bridge\AztecExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\AztecExtendedParametersDTO $obj2)
    {
        $this->send_AztecExtendedParameters_equals($obj1, $obj2);
        return $this->recv_AztecExtendedParameters_equals();
    }

    public function send_AztecExtendedParameters_equals(\Aspose\Barcode\Bridge\AztecExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\AztecExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AztecExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'AztecExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('AztecExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_AztecExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AztecExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_AztecExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("AztecExtendedParameters_equals failed: unknown result");
    }

    public function DataMatrixExtendedParameters_equals(\Aspose\Barcode\Bridge\DataMatrixExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\DataMatrixExtendedParametersDTO $obj2)
    {
        $this->send_DataMatrixExtendedParameters_equals($obj1, $obj2);
        return $this->recv_DataMatrixExtendedParameters_equals();
    }

    public function send_DataMatrixExtendedParameters_equals(\Aspose\Barcode\Bridge\DataMatrixExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\DataMatrixExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataMatrixExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'DataMatrixExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('DataMatrixExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_DataMatrixExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataMatrixExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataMatrixExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("DataMatrixExtendedParameters_equals failed: unknown result");
    }

    public function DotCodeExtendedParameters_equals(\Aspose\Barcode\Bridge\DotCodeExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\DotCodeExtendedParametersDTO $obj2)
    {
        $this->send_DotCodeExtendedParameters_equals($obj1, $obj2);
        return $this->recv_DotCodeExtendedParameters_equals();
    }

    public function send_DotCodeExtendedParameters_equals(\Aspose\Barcode\Bridge\DotCodeExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\DotCodeExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DotCodeExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'DotCodeExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('DotCodeExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_DotCodeExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DotCodeExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DotCodeExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("DotCodeExtendedParameters_equals failed: unknown result");
    }

    public function MaxiCodeExtendedParameters_equals(\Aspose\Barcode\Bridge\MaxiCodeExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\MaxiCodeExtendedParametersDTO $obj2)
    {
        $this->send_MaxiCodeExtendedParameters_equals($obj1, $obj2);
        return $this->recv_MaxiCodeExtendedParameters_equals();
    }

    public function send_MaxiCodeExtendedParameters_equals(\Aspose\Barcode\Bridge\MaxiCodeExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\MaxiCodeExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'MaxiCodeExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('MaxiCodeExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_MaxiCodeExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_MaxiCodeExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("MaxiCodeExtendedParameters_equals failed: unknown result");
    }

    public function DataBarExtendedParameters_equals(\Aspose\Barcode\Bridge\DataBarExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\DataBarExtendedParametersDTO $obj2)
    {
        $this->send_DataBarExtendedParameters_equals($obj1, $obj2);
        return $this->recv_DataBarExtendedParameters_equals();
    }

    public function send_DataBarExtendedParameters_equals(\Aspose\Barcode\Bridge\DataBarExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\DataBarExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataBarExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'DataBarExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('DataBarExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_DataBarExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataBarExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DataBarExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("DataBarExtendedParameters_equals failed: unknown result");
    }

    public function Pdf417ExtendedParameters_equals(\Aspose\Barcode\Bridge\Pdf417ExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\Pdf417ExtendedParametersDTO $obj2)
    {
        $this->send_Pdf417ExtendedParameters_equals($obj1, $obj2);
        return $this->recv_Pdf417ExtendedParameters_equals();
    }

    public function send_Pdf417ExtendedParameters_equals(\Aspose\Barcode\Bridge\Pdf417ExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\Pdf417ExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Pdf417ExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Pdf417ExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Pdf417ExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Pdf417ExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Pdf417ExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Pdf417ExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Pdf417ExtendedParameters_equals failed: unknown result");
    }

    public function QRExtendedParameters_equals(\Aspose\Barcode\Bridge\QRExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\QRExtendedParametersDTO $obj2)
    {
        $this->send_QRExtendedParameters_equals($obj1, $obj2);
        return $this->recv_QRExtendedParameters_equals();
    }

    public function send_QRExtendedParameters_equals(\Aspose\Barcode\Bridge\QRExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\QRExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QRExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'QRExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('QRExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_QRExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QRExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_QRExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("QRExtendedParameters_equals failed: unknown result");
    }

    public function Code128ExtendedParameters_equals(\Aspose\Barcode\Bridge\Code128ExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\Code128ExtendedParametersDTO $obj2)
    {
        $this->send_Code128ExtendedParameters_equals($obj1, $obj2);
        return $this->recv_Code128ExtendedParameters_equals();
    }

    public function send_Code128ExtendedParameters_equals(\Aspose\Barcode\Bridge\Code128ExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\Code128ExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code128ExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Code128ExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Code128ExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Code128ExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code128ExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_Code128ExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("Code128ExtendedParameters_equals failed: unknown result");
    }

    public function OneDExtendedParameters_equals(\Aspose\Barcode\Bridge\OneDExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\OneDExtendedParametersDTO $obj2)
    {
        $this->send_OneDExtendedParameters_equals($obj1, $obj2);
        return $this->recv_OneDExtendedParameters_equals();
    }

    public function send_OneDExtendedParameters_equals(\Aspose\Barcode\Bridge\OneDExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\OneDExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_OneDExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'OneDExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('OneDExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_OneDExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_OneDExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_OneDExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("OneDExtendedParameters_equals failed: unknown result");
    }

    public function BarCodeExtendedParameters_equals(\Aspose\Barcode\Bridge\BarCodeExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\BarCodeExtendedParametersDTO $obj2)
    {
        $this->send_BarCodeExtendedParameters_equals($obj1, $obj2);
        return $this->recv_BarCodeExtendedParameters_equals();
    }

    public function send_BarCodeExtendedParameters_equals(\Aspose\Barcode\Bridge\BarCodeExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\BarCodeExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarCodeExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarCodeExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarCodeExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarCodeExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarCodeExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarCodeExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarCodeExtendedParameters_equals failed: unknown result");
    }

    public function BarCodeRegionParameters_equals(\Aspose\Barcode\Bridge\BarCodeRegionParametersDTO $obj1, \Aspose\Barcode\Bridge\BarCodeRegionParametersDTO $obj2)
    {
        $this->send_BarCodeRegionParameters_equals($obj1, $obj2);
        return $this->recv_BarCodeRegionParameters_equals();
    }

    public function send_BarCodeRegionParameters_equals(\Aspose\Barcode\Bridge\BarCodeRegionParametersDTO $obj1, \Aspose\Barcode\Bridge\BarCodeRegionParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarCodeRegionParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'BarCodeRegionParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('BarCodeRegionParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_BarCodeRegionParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarCodeRegionParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_BarCodeRegionParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("BarCodeRegionParameters_equals failed: unknown result");
    }

    public function CodabarExtendedParameters_equals(\Aspose\Barcode\Bridge\CodabarExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\CodabarExtendedParametersDTO $obj2)
    {
        $this->send_CodabarExtendedParameters_equals($obj1, $obj2);
        return $this->recv_CodabarExtendedParameters_equals();
    }

    public function send_CodabarExtendedParameters_equals(\Aspose\Barcode\Bridge\CodabarExtendedParametersDTO $obj1, \Aspose\Barcode\Bridge\CodabarExtendedParametersDTO $obj2)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodabarExtendedParameters_equals_args();
        $args->obj1 = $obj1;
        $args->obj2 = $obj2;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CodabarExtendedParameters_equals',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CodabarExtendedParameters_equals', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CodabarExtendedParameters_equals()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodabarExtendedParameters_equals_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_CodabarExtendedParameters_equals_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("CodabarExtendedParameters_equals failed: unknown result");
    }

    public function DecodeType_is1D($symbology)
    {
        $this->send_DecodeType_is1D($symbology);
        return $this->recv_DecodeType_is1D();
    }

    public function send_DecodeType_is1D($symbology)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DecodeType_is1D_args();
        $args->symbology = $symbology;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'DecodeType_is1D',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('DecodeType_is1D', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_DecodeType_is1D()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DecodeType_is1D_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DecodeType_is1D_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("DecodeType_is1D failed: unknown result");
    }

    public function DecodeType_isPostal($symbology)
    {
        $this->send_DecodeType_isPostal($symbology);
        return $this->recv_DecodeType_isPostal();
    }

    public function send_DecodeType_isPostal($symbology)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DecodeType_isPostal_args();
        $args->symbology = $symbology;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'DecodeType_isPostal',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('DecodeType_isPostal', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_DecodeType_isPostal()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DecodeType_isPostal_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DecodeType_isPostal_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("DecodeType_isPostal failed: unknown result");
    }

    public function DecodeType_is2D($symbology)
    {
        $this->send_DecodeType_is2D($symbology);
        return $this->recv_DecodeType_is2D();
    }

    public function send_DecodeType_is2D($symbology)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DecodeType_is2D_args();
        $args->symbology = $symbology;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'DecodeType_is2D',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('DecodeType_is2D', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_DecodeType_is2D()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DecodeType_is2D_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_DecodeType_is2D_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("DecodeType_is2D failed: unknown result");
    }

    public function LicensePHP_setLicense($base64LicenseContent)
    {
        $this->send_LicensePHP_setLicense($base64LicenseContent);
        $this->recv_LicensePHP_setLicense();
    }

    public function send_LicensePHP_setLicense($base64LicenseContent)
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_LicensePHP_setLicense_args();
        $args->base64LicenseContent = $base64LicenseContent;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'LicensePHP_setLicense',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('LicensePHP_setLicense', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_LicensePHP_setLicense()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_LicensePHP_setLicense_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_LicensePHP_setLicense_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        return;
    }

    public function LicensePHP_resetLicense()
    {
        $this->send_LicensePHP_resetLicense();
        $this->recv_LicensePHP_resetLicense();
    }

    public function send_LicensePHP_resetLicense()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_LicensePHP_resetLicense_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'LicensePHP_resetLicense',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('LicensePHP_resetLicense', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_LicensePHP_resetLicense()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_LicensePHP_resetLicense_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_LicensePHP_resetLicense_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        return;
    }

    public function LicensePHP_isLicensed()
    {
        $this->send_LicensePHP_isLicensed();
        return $this->recv_LicensePHP_isLicensed();
    }

    public function send_LicensePHP_isLicensed()
    {
        $args = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_LicensePHP_isLicensed_args();
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'LicensePHP_isLicensed',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('LicensePHP_isLicensed', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_LicensePHP_isLicensed()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_LicensePHP_isLicensed_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Aspose\Barcode\Bridge\ThriftAsposeBarcodeService_LicensePHP_isLicensed_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("LicensePHP_isLicensed failed: unknown result");
    }
}

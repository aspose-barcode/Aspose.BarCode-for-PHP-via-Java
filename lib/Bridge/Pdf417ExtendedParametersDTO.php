<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Pdf417ExtendedParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'macroPdf417FileID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'macroPdf417SegmentID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'macroPdf417SegmentsCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'macroPdf417FileName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'macroPdf417FileSize',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'macroPdf417Sender',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'macroPdf417Addressee',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'macroPdf417TimeStamp',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'macroPdf417Checksum',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'macroPdf417Terminator',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        11 => array(
            'var' => 'isReaderInitialization',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'isLinked',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        13 => array(
            'var' => 'isCode128Emulation',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        14 => array(
            'var' => 'toString',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $macroPdf417FileID = null;
    /**
     * @var int
     */
    public $macroPdf417SegmentID = null;
    /**
     * @var int
     */
    public $macroPdf417SegmentsCount = null;
    /**
     * @var string
     */
    public $macroPdf417FileName = null;
    /**
     * @var int
     */
    public $macroPdf417FileSize = null;
    /**
     * @var string
     */
    public $macroPdf417Sender = null;
    /**
     * @var string
     */
    public $macroPdf417Addressee = null;
    /**
     * @var string
     */
    public $macroPdf417TimeStamp = null;
    /**
     * @var int
     */
    public $macroPdf417Checksum = null;
    /**
     * @var bool
     */
    public $macroPdf417Terminator = null;
    /**
     * @var bool
     */
    public $isReaderInitialization = null;
    /**
     * @var bool
     */
    public $isLinked = null;
    /**
     * @var bool
     */
    public $isCode128Emulation = null;
    /**
     * @var string
     */
    public $toString = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['macroPdf417FileID'])) {
                $this->macroPdf417FileID = $vals['macroPdf417FileID'];
            }
            if (isset($vals['macroPdf417SegmentID'])) {
                $this->macroPdf417SegmentID = $vals['macroPdf417SegmentID'];
            }
            if (isset($vals['macroPdf417SegmentsCount'])) {
                $this->macroPdf417SegmentsCount = $vals['macroPdf417SegmentsCount'];
            }
            if (isset($vals['macroPdf417FileName'])) {
                $this->macroPdf417FileName = $vals['macroPdf417FileName'];
            }
            if (isset($vals['macroPdf417FileSize'])) {
                $this->macroPdf417FileSize = $vals['macroPdf417FileSize'];
            }
            if (isset($vals['macroPdf417Sender'])) {
                $this->macroPdf417Sender = $vals['macroPdf417Sender'];
            }
            if (isset($vals['macroPdf417Addressee'])) {
                $this->macroPdf417Addressee = $vals['macroPdf417Addressee'];
            }
            if (isset($vals['macroPdf417TimeStamp'])) {
                $this->macroPdf417TimeStamp = $vals['macroPdf417TimeStamp'];
            }
            if (isset($vals['macroPdf417Checksum'])) {
                $this->macroPdf417Checksum = $vals['macroPdf417Checksum'];
            }
            if (isset($vals['macroPdf417Terminator'])) {
                $this->macroPdf417Terminator = $vals['macroPdf417Terminator'];
            }
            if (isset($vals['isReaderInitialization'])) {
                $this->isReaderInitialization = $vals['isReaderInitialization'];
            }
            if (isset($vals['isLinked'])) {
                $this->isLinked = $vals['isLinked'];
            }
            if (isset($vals['isCode128Emulation'])) {
                $this->isCode128Emulation = $vals['isCode128Emulation'];
            }
            if (isset($vals['toString'])) {
                $this->toString = $vals['toString'];
            }
        }
    }

    public function getName()
    {
        return 'Pdf417ExtendedParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->macroPdf417FileID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->macroPdf417SegmentID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->macroPdf417SegmentsCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->macroPdf417FileName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->macroPdf417FileSize);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->macroPdf417Sender);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->macroPdf417Addressee);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->macroPdf417TimeStamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->macroPdf417Checksum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->macroPdf417Terminator);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isReaderInitialization);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isLinked);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isCode128Emulation);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toString);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Pdf417ExtendedParametersDTO');
        if ($this->macroPdf417FileID !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417FileID', TType::STRING, 1);
            $xfer += $output->writeString($this->macroPdf417FileID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroPdf417SegmentID !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417SegmentID', TType::I32, 2);
            $xfer += $output->writeI32($this->macroPdf417SegmentID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroPdf417SegmentsCount !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417SegmentsCount', TType::I32, 3);
            $xfer += $output->writeI32($this->macroPdf417SegmentsCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroPdf417FileName !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417FileName', TType::STRING, 4);
            $xfer += $output->writeString($this->macroPdf417FileName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroPdf417FileSize !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417FileSize', TType::I32, 5);
            $xfer += $output->writeI32($this->macroPdf417FileSize);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroPdf417Sender !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417Sender', TType::STRING, 6);
            $xfer += $output->writeString($this->macroPdf417Sender);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroPdf417Addressee !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417Addressee', TType::STRING, 7);
            $xfer += $output->writeString($this->macroPdf417Addressee);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroPdf417TimeStamp !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417TimeStamp', TType::STRING, 8);
            $xfer += $output->writeString($this->macroPdf417TimeStamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroPdf417Checksum !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417Checksum', TType::I32, 9);
            $xfer += $output->writeI32($this->macroPdf417Checksum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->macroPdf417Terminator !== null) {
            $xfer += $output->writeFieldBegin('macroPdf417Terminator', TType::BOOL, 10);
            $xfer += $output->writeBool($this->macroPdf417Terminator);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isReaderInitialization !== null) {
            $xfer += $output->writeFieldBegin('isReaderInitialization', TType::BOOL, 11);
            $xfer += $output->writeBool($this->isReaderInitialization);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isLinked !== null) {
            $xfer += $output->writeFieldBegin('isLinked', TType::BOOL, 12);
            $xfer += $output->writeBool($this->isLinked);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isCode128Emulation !== null) {
            $xfer += $output->writeFieldBegin('isCode128Emulation', TType::BOOL, 13);
            $xfer += $output->writeBool($this->isCode128Emulation);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toString !== null) {
            $xfer += $output->writeFieldBegin('toString', TType::STRING, 14);
            $xfer += $output->writeString($this->toString);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

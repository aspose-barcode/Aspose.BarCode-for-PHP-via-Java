<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BarCodeResultDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'readingQuality',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        2 => array(
            'var' => 'confidence',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'codeBytes',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'codeType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'codeTypeName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'region',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\BarCodeRegionParametersDTO',
        ),
        7 => array(
            'var' => 'extended',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\BarCodeExtendedParametersDTO',
        ),
        8 => array(
            'var' => 'codeText',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var double
     */
    public $readingQuality = null;
    /**
     * @var int
     */
    public $confidence = null;
    /**
     * @var string
     */
    public $codeBytes = null;
    /**
     * @var int
     */
    public $codeType = null;
    /**
     * @var string
     */
    public $codeTypeName = null;
    /**
     * @var \Aspose\Barcode\Bridge\BarCodeRegionParametersDTO
     */
    public $region = null;
    /**
     * @var \Aspose\Barcode\Bridge\BarCodeExtendedParametersDTO
     */
    public $extended = null;
    /**
     * @var string
     */
    public $codeText = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['readingQuality'])) {
                $this->readingQuality = $vals['readingQuality'];
            }
            if (isset($vals['confidence'])) {
                $this->confidence = $vals['confidence'];
            }
            if (isset($vals['codeBytes'])) {
                $this->codeBytes = $vals['codeBytes'];
            }
            if (isset($vals['codeType'])) {
                $this->codeType = $vals['codeType'];
            }
            if (isset($vals['codeTypeName'])) {
                $this->codeTypeName = $vals['codeTypeName'];
            }
            if (isset($vals['region'])) {
                $this->region = $vals['region'];
            }
            if (isset($vals['extended'])) {
                $this->extended = $vals['extended'];
            }
            if (isset($vals['codeText'])) {
                $this->codeText = $vals['codeText'];
            }
        }
    }

    public function getName()
    {
        return 'BarCodeResultDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->readingQuality);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->confidence);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->codeBytes);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->codeType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->codeTypeName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->region = new \Aspose\Barcode\Bridge\BarCodeRegionParametersDTO();
                        $xfer += $this->region->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->extended = new \Aspose\Barcode\Bridge\BarCodeExtendedParametersDTO();
                        $xfer += $this->extended->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->codeText);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BarCodeResultDTO');
        if ($this->readingQuality !== null) {
            $xfer += $output->writeFieldBegin('readingQuality', TType::DOUBLE, 1);
            $xfer += $output->writeDouble($this->readingQuality);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->confidence !== null) {
            $xfer += $output->writeFieldBegin('confidence', TType::I32, 2);
            $xfer += $output->writeI32($this->confidence);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codeBytes !== null) {
            $xfer += $output->writeFieldBegin('codeBytes', TType::STRING, 3);
            $xfer += $output->writeString($this->codeBytes);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codeType !== null) {
            $xfer += $output->writeFieldBegin('codeType', TType::I32, 4);
            $xfer += $output->writeI32($this->codeType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codeTypeName !== null) {
            $xfer += $output->writeFieldBegin('codeTypeName', TType::STRING, 5);
            $xfer += $output->writeString($this->codeTypeName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->region !== null) {
            if (!is_object($this->region)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('region', TType::STRUCT, 6);
            $xfer += $this->region->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extended !== null) {
            if (!is_object($this->extended)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extended', TType::STRUCT, 7);
            $xfer += $this->extended->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->codeText !== null) {
            $xfer += $output->writeFieldBegin('codeText', TType::STRING, 8);
            $xfer += $output->writeString($this->codeText);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

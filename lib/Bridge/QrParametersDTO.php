<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class QrParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'structuredAppend',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Aspose\Barcode\Bridge\QrStructuredAppendParametersDTO',
        ),
        2 => array(
            'var' => 'qrECIEncoding',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'qrEncodeMode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'qrEncodeType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'qrErrorLevel',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'qrVersion',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        7 => array(
            'var' => 'microQRVersion',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'rectMicroQrVersion',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'aspectRatio',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
    );

    /**
     * @var \Aspose\Barcode\Bridge\QrStructuredAppendParametersDTO
     */
    public $structuredAppend = null;
    /**
     * @var int
     */
    public $qrECIEncoding = null;
    /**
     * @var int
     */
    public $qrEncodeMode = null;
    /**
     * @var int
     */
    public $qrEncodeType = null;
    /**
     * @var int
     */
    public $qrErrorLevel = null;
    /**
     * @var int
     */
    public $qrVersion = null;
    /**
     * @var int
     */
    public $microQRVersion = null;
    /**
     * @var int
     */
    public $rectMicroQrVersion = null;
    /**
     * @var double
     */
    public $aspectRatio = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['structuredAppend'])) {
                $this->structuredAppend = $vals['structuredAppend'];
            }
            if (isset($vals['qrECIEncoding'])) {
                $this->qrECIEncoding = $vals['qrECIEncoding'];
            }
            if (isset($vals['qrEncodeMode'])) {
                $this->qrEncodeMode = $vals['qrEncodeMode'];
            }
            if (isset($vals['qrEncodeType'])) {
                $this->qrEncodeType = $vals['qrEncodeType'];
            }
            if (isset($vals['qrErrorLevel'])) {
                $this->qrErrorLevel = $vals['qrErrorLevel'];
            }
            if (isset($vals['qrVersion'])) {
                $this->qrVersion = $vals['qrVersion'];
            }
            if (isset($vals['microQRVersion'])) {
                $this->microQRVersion = $vals['microQRVersion'];
            }
            if (isset($vals['rectMicroQrVersion'])) {
                $this->rectMicroQrVersion = $vals['rectMicroQrVersion'];
            }
            if (isset($vals['aspectRatio'])) {
                $this->aspectRatio = $vals['aspectRatio'];
            }
        }
    }

    public function getName()
    {
        return 'QrParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->structuredAppend = new \Aspose\Barcode\Bridge\QrStructuredAppendParametersDTO();
                        $xfer += $this->structuredAppend->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->qrECIEncoding);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->qrEncodeMode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->qrEncodeType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->qrErrorLevel);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->qrVersion);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->microQRVersion);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->rectMicroQrVersion);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->aspectRatio);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('QrParametersDTO');
        if ($this->structuredAppend !== null) {
            if (!is_object($this->structuredAppend)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('structuredAppend', TType::STRUCT, 1);
            $xfer += $this->structuredAppend->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->qrECIEncoding !== null) {
            $xfer += $output->writeFieldBegin('qrECIEncoding', TType::I32, 2);
            $xfer += $output->writeI32($this->qrECIEncoding);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->qrEncodeMode !== null) {
            $xfer += $output->writeFieldBegin('qrEncodeMode', TType::I32, 3);
            $xfer += $output->writeI32($this->qrEncodeMode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->qrEncodeType !== null) {
            $xfer += $output->writeFieldBegin('qrEncodeType', TType::I32, 4);
            $xfer += $output->writeI32($this->qrEncodeType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->qrErrorLevel !== null) {
            $xfer += $output->writeFieldBegin('qrErrorLevel', TType::I32, 5);
            $xfer += $output->writeI32($this->qrErrorLevel);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->qrVersion !== null) {
            $xfer += $output->writeFieldBegin('qrVersion', TType::I32, 6);
            $xfer += $output->writeI32($this->qrVersion);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->microQRVersion !== null) {
            $xfer += $output->writeFieldBegin('microQRVersion', TType::I32, 7);
            $xfer += $output->writeI32($this->microQRVersion);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rectMicroQrVersion !== null) {
            $xfer += $output->writeFieldBegin('rectMicroQrVersion', TType::I32, 8);
            $xfer += $output->writeI32($this->rectMicroQrVersion);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->aspectRatio !== null) {
            $xfer += $output->writeFieldBegin('aspectRatio', TType::DOUBLE, 9);
            $xfer += $output->writeDouble($this->aspectRatio);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

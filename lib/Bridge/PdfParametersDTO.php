<?php
namespace Aspose\Barcode\Bridge;

/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PdfParametersDTO
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'cmykBarColor',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'cmykBackColor',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'cmykCodetextColor',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'cmykCaptionAboveColor',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'cmykCaptionBelowColor',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'textAsPath',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var string
     */
    public $cmykBarColor = null;
    /**
     * @var string
     */
    public $cmykBackColor = null;
    /**
     * @var string
     */
    public $cmykCodetextColor = null;
    /**
     * @var string
     */
    public $cmykCaptionAboveColor = null;
    /**
     * @var string
     */
    public $cmykCaptionBelowColor = null;
    /**
     * @var bool
     */
    public $textAsPath = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['cmykBarColor'])) {
                $this->cmykBarColor = $vals['cmykBarColor'];
            }
            if (isset($vals['cmykBackColor'])) {
                $this->cmykBackColor = $vals['cmykBackColor'];
            }
            if (isset($vals['cmykCodetextColor'])) {
                $this->cmykCodetextColor = $vals['cmykCodetextColor'];
            }
            if (isset($vals['cmykCaptionAboveColor'])) {
                $this->cmykCaptionAboveColor = $vals['cmykCaptionAboveColor'];
            }
            if (isset($vals['cmykCaptionBelowColor'])) {
                $this->cmykCaptionBelowColor = $vals['cmykCaptionBelowColor'];
            }
            if (isset($vals['textAsPath'])) {
                $this->textAsPath = $vals['textAsPath'];
            }
        }
    }

    public function getName()
    {
        return 'PdfParametersDTO';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cmykBarColor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cmykBackColor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cmykCodetextColor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cmykCaptionAboveColor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cmykCaptionBelowColor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->textAsPath);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PdfParametersDTO');
        if ($this->cmykBarColor !== null) {
            $xfer += $output->writeFieldBegin('cmykBarColor', TType::STRING, 1);
            $xfer += $output->writeString($this->cmykBarColor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cmykBackColor !== null) {
            $xfer += $output->writeFieldBegin('cmykBackColor', TType::STRING, 2);
            $xfer += $output->writeString($this->cmykBackColor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cmykCodetextColor !== null) {
            $xfer += $output->writeFieldBegin('cmykCodetextColor', TType::STRING, 3);
            $xfer += $output->writeString($this->cmykCodetextColor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cmykCaptionAboveColor !== null) {
            $xfer += $output->writeFieldBegin('cmykCaptionAboveColor', TType::STRING, 4);
            $xfer += $output->writeString($this->cmykCaptionAboveColor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cmykCaptionBelowColor !== null) {
            $xfer += $output->writeFieldBegin('cmykCaptionBelowColor', TType::STRING, 5);
            $xfer += $output->writeString($this->cmykCaptionBelowColor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->textAsPath !== null) {
            $xfer += $output->writeFieldBegin('textAsPath', TType::BOOL, 6);
            $xfer += $output->writeBool($this->textAsPath);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
